/*! \page testframeworkpage The Testing Framework

    The `sequoia` testing framework is designed for
    \ref sec_scale "scale"
    and is
    \ref sec_automated  "highly automated",
    \ref sec_robustness "robust",
    \ref sec_extensible "extensible",
    \ref sec_semantics  "semantics-aware",
    \ref sec_allocators "allocator-aware",
    \ref sec_generics   "generics-friendly"
    and
    \ref sec_expressive "expressive".

    \section sec_scale Scalabilty

    To operate effectively at scale, `sequoia` incorporates the following features:
    - No waste: if a principled structure is adhered to, then running with the `prune` option
    will ensure that only those tests dependent on changes since the last run will be executed.
    Changes may be either to source files or materials exploited by the test.
    In particular:
       -# cpp files should supply definitions only for the header of the same name;
       -# Given a test file `Tests/Foo/Bar.cpp`, any testing materials should be stored in `TestMaterials\Foo\Bar`.
    - Concurrency: by default, tests run concurrently. Tests are grouped into families and,
      by default, concurrency will be at the family level if there are more than three families; otherwise,
      concurrency is at the level of individual tests. However, this may be overridden using 
      `--async-depth`.
    - Instability detection: `locate-instabilities` is called with an integer, specifying the number
      of times tests should be run. Instabilities are pinned down to the line of test code where
      they first manifest. By default, everything is run within the same program, allowing detection
      of changes to static data. However, it's conceivable that these changes are desired. To allow false
      positives, use the `--sandbox` flag to ensure that each run is done in an independent process.

    \section sec_automated Automation

    The processes of initializating a new project, and creating new tests are highly automated.
    Both are integrated with CMake. For example, running with the command line arguments

    <pre>
        init "Jo Bloggs" "Some/Absolute/Path" "\t"
    </pre>

    will do the following:
    -# Create a new project in the specified location, with tabs preferred to spaces, and with
       the copyright of any new material created though mechanisms described below belonging to
       Jo Bloggs.
    -# Invoke `CMake` to build the new project.
    -# Initialize a new `git` repository and add the newly created project files.

    Additionally, on Windows:
    -# Visual Studio will be launched, with the appropriate start-up project set.
    -# The new project's (empty) test suite will be run.

    Once a new project has been created, it is natural to add code and tests. This can all
    be done automatically by utilizing the `create` mode which will add the appropriate files,
    amend the `CMakeLists.txt` files and run CMake.

    \section sec_robustness Robustness

    The testing framework is sophisticated and sophistication brings danger, since it
    raises the chances that the framework itself has bugs. If this is the case, then the
    framework would give clients a false sense of security about the code they have written,
    which could be disastrous. To mitigate this risk, the testing framework has been
    designed to run self-diagnostics. This has been employed to give a high degree of
    confidence that the existing framework is correct. Used idiomatically, it should confer
    similar confidence in any extensions.

    One of the defining features of the testing framework is that it is designed to expose
    false-positives. As such, each test operates in a particular
    \ref test_mode_enum "test_mode", chosen at
    compile time: standard, false_positive and false_negative.

    In standard mode, the test framework operates as one might expect. A typical
    check looks as follows:

    <pre>
    check_equality("Description of test", x, 5);
    </pre>

    If `x==5` the check passes, whereas if `x!=5` a failure is reported. However, suppose that
    check_equality has a bug. For example, it might never report failure.
    To counter this, tests can be created to be run in false-positive mode. In this case,
    the above example will pass when `x!=5` and fail when `x==5`. The purpose of this is to pick
    up bugs in the testing framework itself.

    In standard mode, when a test fails, details of the failure will be given directly to
    the client. In the above example, for the case where `x==4`, something like this will be
    seen:

    <pre>
    Obtained : 4
    Predicted: 5
    </pre>

    In false-positive mode, this output is not made directly visible to the user, since 
    the false-positive test has succeeded. Instead, it is dumped to a file. This means that
    clients can check whether
    the underlying failure which the false-positive check has detected is as expected. It is
    good practice to place this file under version control. This provides sensitivity both to
    changes in the false-positive test and also changes to the way in which the testing
    framework generates output.

    Clients may extend the testing framework to conveniently test their types, for example
    by specializing the \ref detailed_equality_checker_primary "detailed_equality_checker"
    (see \ref sec_extensible). This is a perfect
    opportunity to write some false-positive tests to give confidence that the newly-added code
    is not spuriously reporting success.

    Finally, there are false-negative tests. They are essentially the same as standard mode tests;
    however, they are treated separately since statements like

    <pre>
    check_equality("Description of test", 5, 5);
    </pre>

    are morally tests of the testing framework itself, rather than tests of client code. As
    with false-positive tests, output is dumped to an auxiliary file, primarily as a means
    of detecting (via version control) changes to the way the testing framework generates
    output.


    \section sec_extensible Extensibility

    There are several ways in which the testing framework may be extended. Suppose that a
    client has created a new type, `my_type`. One way or another, it is almost inevitable that
    calls will be made to `check_equality`. If the type is sufficiently simple, and defines
    `operator==`, it suffices for clients to specialize the class template
    \ref serializer_primary "serializer". This
    defines how to serialize instances of the class and so we may again end up with a failure
    report along the lines of the above. However, if the class is more complex, there is
    a superior alternative.

    `sequoia` defines a class template,
    \ref detailed_equality_checker_primary "detailed_equality_checker".
    The purpose of this is to
    use the `const` accessors of two instances of a class to probe their purported equality.
    Suppose that a client has created a new container and consider comparing two instances.
    `operator==` may return `false` or `true`. In the first case, we want to get to the bottom
    of this, in a more appropriate manner than simply serializing the class (which may produce
    excessive output). For a container, it would make sense compare the size and then
    to use iterators to compare
    the elements and find any that differ. However, it is worth doing this even if `operator==`
    returns `true`; after all, the aim is to test with high fidelity and it may be that `operator==`
    has a bug; or perhaps it is fine but there's a bug in the const accessors. Either way,
    a well designed specialization of the
    \ref detailed_equality_checker_primary "detailed_equality_checker" will catch these
    potential inconsistencies.

    However, there is a gap here. Consider the the first time a type is instantiated in
    a test, say

    <pre>
    my_type x{5};
    </pre>

    It is desirable to check that `x` is correctly initialized, but circular to write something
    like

    <pre>
    check_equality("x correctly initialized", x, my_type{5});
    </pre>

    Therefore, in addition to the
    \ref detailed_equality_checker_primary "detailed_equality_checker", the framework defines two class
    templates,
    \ref equivalence_checker_primary "equivalence_checker" and
    \ref weak_equivalence_checker_primary "weak_equivalence_checker".
    Suppose that, in this example,
    `my_type` simply wraps an `int`. Here it may make sense to define the specialization
    `equivalence_checker<my_type>`; internally, this will define a static function, `check`, which
    defines a comparison between `my_type` and `int`. The line of code above may then be replaced by

    <pre>
    check_equivalence("x correctly initialized", x, 5);
    </pre>

    Once consistency of initialization has been checked, thereafter it makes sense to revert
    to `check_equality`.

    What of the \ref weak_equivalence_checker_primary "weak_equivalence_checker"?
    This is for cases where there is a signifcant mismatch
    between the information content of the type to be checked and the type it is being compared
    with.

    There is also an entirely different way in which the testing framework may be extended.
    The \ref checker_primary "checker" class template provides basic functionality such as `check_equality` and
    `check_exception_thrown`. However, the class template accepts a variadic number of extenders,
    which enhance its functionality. Examples provided with `sequoia` are various semantics extenders
    (see below), a
    \ref performance_extender_primary "performance_extender", and a
    \ref fuzzy_extender_primary "fuzzy_extender" for doing fuzzy comparisons. These may be readily
    mixed and matched with appropriate using declarations, some of which are supplied with the
    library. If a client of the code wishes to provide a new extension, simply follow the existing
    pattern using e.g. FuzzyTestCore.hpp as an example.


    \section sec_semantics Semantics-Awareness

    By utilizing `sequoia`'s testing framework, clients are strongly encourged to think carefully
    about the semantics of their classes upfront, rather than as an after-thought. For the
    purposes of this library, a type exhibiting regular semantics is understood to exhibit copy/move
    constructors, copy/move assigment, `operator==`, `operator!=` and swap. Note that
    there is no strict requirement for a default constructor. If a class provides this
    functionality, then the \ref regular_test_alias "regular_test" alias template may be utilized,
    which makes use of the
    \ref regular_extender_primary "regular_extender" class template. The latter
    provides an overload of `check_semantics`: given two instantiations of a class it checks
    consistency of the above list of special member functions / functions. Alternatively,
    for move-only types (defined as regular types but for which the copy operations are removed),
    the \ref move_only_test_alias "move_only_test" may be exploited.
    Either way, this removes much
    of the burden of devising ways to carefully check consistency of these operations by
    reliably bundling everything into a call to check_semantics.


    \section sec_allocators Allocator-Awareness

    The C++17 allocator framework is powerful but complex. Much of this complexity derives
    from the intersection of the logical abstraction containers seek to represent with the
    realities of creating efficient code. Consider `std::vector`. This models dynamic, contiguous
    storage: the logical content of this container is its elements. Indeed, `operator==` checks
    that two vectors are of the same size and that its elements are equal, but no more than
    this. However, vectors additionally comprise allocators which are not part of the logical
    abstraction. In principle, the allocator maybe stateful and this raises interesting questions.
    Should `operator==` take account of this state? The design of `std::vector` gives a definitive
    answer: No. But what should be done when doing assignment? Should the state of the allocator
    propagate or not. Should the choice be consistent between copy assignment and move assignment?
    What about swapping? There are no definitive answers to these questions and so this is left
    in the hands of the client. Indeed, `std::allocator_traits` exposes various type definitions,
    reflecting this freedom.

    With flexibility of the C++ allocation model comes commensurate difficulty when it comes
    to testing. To help with this, the `sequoia` testing framework has been built with allocators
    firmly in mind. An allocator-aware class with regular semantics may be rigorously tested by
    using a
    \ref regular_allocation_extender_primary "regular_allocation_extender"; for the move-only case
    \ref move_only_allocation_extender_primary "move_only_allocation_extender"
    is available.
    These checkers provides an overload of the check_semantics
    method which accepts allocation predictions. In the regular case, the latter correspond to
    copying, assigning (with and without
    propagation) and mutation, together with para-copy/move. Here and throught the documentation
    para copy/move refer to the copy-like and move-like constructors which additionally accept
    an allocator.
    The design accomodates scoped allocators and multiple
    allocators (be each of them normal or scoped). 
    \ref regular_allocation_test_alias "Regular allocation tests"
    come with a facility for
    automatically
    generating all 8 combinations of allocation propagation from a single call to `check_semantics`.
    \ref move_only_allocation_test_alias "Move-only allocation tests" do likewise for the
    4 combinations relevant to move-only types.

    An additional subtlety arises from attempting to ensure independence on library implementations
    and build settings. This is
    sharpened by the fact that certain operations on the standard containers perform
    additional allocations in an MSVC debug build, compared to a release build. However, the framework
    is flexible enough to deal with this. Indeed, if the semantics are such that the
    container under inspection behaves like a container of values, then the framework automatically
    shifts the user-supplied allocation predictions to compensate. If, instead, it behaves like
    a container of pointers, then a line of code registering this fact is sufficient. If the
    behaviour does not fit into either of these categories, then the framework is flexible enough
    for clients to specify their own solutions.
    

    The allocation testing framework has been rigorously tested with a combination of
    false-positive and false-negative checks and has very high fidelity. For example, if
    `check_semantics` is fed instances of an allocating type for which `operator==` has accidentally
    been written such
    that one (or both) of its arguments are captured by value, rather than by reference, the
    framework will detect this.


    \section sec_generics Generics-Friendliness

    When writing generic code, it is natural to want to test it with a variety of appropriate
    types. This leads to the idea of templated unit tests; within `sequoia` this is
    most naturally achieved by leaving the test classes plain (rather than templated) but
    templating various methods inside. However, a challenge with doing this is interpreting failures.
    The line at which the failure occurs is no longer enough to uniquely disambiguate, since
    this line may correspond to
    several different template instantiations.

    Consequently, `sequoia` reports failures with plenty of type information. For example, the following
    output is typical of what to expect when checking the equality of two instances
    of `std::pair<int,double>`:

    <pre>
    ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 51
	[std::pair<int, double>]
	operator== returned false

    Second element of pair is incorrect
	[double]
	operator== returned false
	Obtained : 7.8
	Predicted: -7.8
    </pre>

    For each sub-check performed as part of the top-level check, type information is reported. This is
    generated by the class template \ref type_demangler_primary "type_demangler". Clients are welcome
    to specialize this to provide more readable demangling.

    \section sec_expressive Expressiveness

    The focus of the testing framework's API is on providing useful primitives, such as `check_equality` and
    `check_semantics`, rather than providing classes with names like 'Then' and 'That'. However, in
    addition to encouraging clients to think seriously about providing each check with a descriptive
    string (which, being the first argument of each check method, is firmly encouraged), there is the facility
    to provide customized advice in the event of particular failures. For example, within the allocation
    testing framework, it is possible for a negative number of allocations to be reported. This is rather
    counter-intuitive and, when encountered for the first time, may raise doubts as to the correctness
    of the framework. This is hopefully ameliorated by levaraging the advice functionality internally, giving
    typical output:

    <pre>
    Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.
    </pre>

    Clients may provided customized advice by calling many of the check methods with an extra function
    object bound to an instance of the \ref tutor_primary "tutor" class template.
    If `operator()` is overloaded in such a way that it takes two instances of a type and
    returns a string, then reflection is utilized to apply this function object whenever the
    appropriate overload may be invoked. For example, consider the case where a function object is supplied to
    provide advice for ints, under certain conditions. Suppose this
    function object is fed to a check performed on a `std::vector<int>`. In this case, the function object
    will be propagated internally until it reaches the point where it can be invoked
    on the `int`s at the end of the chain.


 */