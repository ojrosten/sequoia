////////////////////////////////////////////////////////////////////
//                Copyright Oliver J. Rosten 2021.                //
// Distributed under the GNU GENERAL PUBLIC LICENSE, Version 3.0. //
//    (See accompanying file LICENSE.md or copy at                //
//          https://www.gnu.org/licenses/gpl-3.0.en.html)         //
////////////////////////////////////////////////////////////////////

#pragma once

/*! \file */

#include "sequoia/TestFramework/RegularTestCore.hpp"
#include "sequoia/Core/Object/Factory.hpp"

#include <map>

namespace sequoia::testing
{
  template<class... Products>
  struct value_tester<sequoia::object::factory<Products...>>
  {
    using type = sequoia::object::factory<Products...>;
    using element = std::pair<std::string, std::variant<Products...>>;

    template<class... Args>
    using factory_check_type = general_equivalence_check_t<std::tuple<Args...>>;
    
    template<test_mode Mode, class... Args>
      requires (initializable_from<Products, Args...> && ... )
    static void test(factory_check_type<Args...> equivChecker, test_logger<Mode>& logger, const type& actual, const std::array<element, sizeof...(Products)>& prediction)
    {
      for(const auto&[name, product] : prediction)
      {
        const auto message{std::string{"Product generated by name '"}.append(name).append("'")};
        auto maker{
          [&actual, &name](const Args&... args){
            return actual.make(name, args...);
          }
        };
        check(equality, message, logger, std::apply(maker, equivChecker.customizer), product);
      }
    }

    template<test_mode Mode>
    static void test(equivalence_check_t, test_logger<Mode>& logger, const type& actual, const std::array<element, sizeof...(Products)>& prediction)
    {
      for(const auto&[name, product] : prediction)
      {
        const auto message{std::string{"Product generated by name '"}.append(name).append("'")};
        check(equality, message, logger, actual.make(name), product);
      }
    }


    template<test_mode Mode>
    static void test(equality_check_t, test_logger<Mode>& logger, const type& actual, const type& prediction)
    {
      check(equality, "Names", logger, actual.begin_names(), actual.end_names(), prediction.begin_names(), prediction.end_names());
    }
  };
}
