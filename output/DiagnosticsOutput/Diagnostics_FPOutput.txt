	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 65

	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 66

	[bool]
	operator== returned false
	Obtained : false
	Predicted: true
	Advice   : I pity the fool who confuses the bool.

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 70
	Integers which should compare different

	[int]
	operator== returned false
	Obtained : 5
	Predicted: 4

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 71

	[double]
	operator== returned false
	Obtained : 6.5
	Predicted: 5.6
	Advice   : Double, double, toil and trouble

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 75

	[std::__1::pair<int, double>]
	operator== returned false

	Second element of pair is incorrect
	[double]
	operator== returned false
	Obtained : 7.8
	Predicted: -7.8

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 76

	[std::__1::pair<int, double>]
	operator== returned false

	First element of pair is incorrect
	[int]
	operator== returned false
	Obtained : 5
	Predicted: -5

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 77

	[std::__1::pair<int, double>]
	operator== returned false

	First element of pair is incorrect
	[int]
	operator== returned false
	Obtained : 5
	Predicted: -5
	Advice   : Integer advice

	Second element of pair is incorrect
	[double]
	operator== returned false
	Obtained : 7.8
	Predicted: 6.8
	Advice   : Double advice

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 79

	[std::__1::tuple<int, double, float>]
	operator== returned false

	Element 0 of tuple incorrect
	[int]
	operator== returned false
	Obtained : 4
	Predicted: 0

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 80

	[std::__1::tuple<int, double, float>]
	operator== returned false

	Element 1 of tuple incorrect
	[double]
	operator== returned false
	Obtained : 3.4
	Predicted: 0

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 81

	[std::__1::tuple<int, double, float>]
	operator== returned false

	Element 2 of tuple incorrect
	[float]
	operator== returned false
	Obtained : -9.2
	Predicted: -0

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 83
	Exception expected but nothing thrown

	Expected Exception Type:
	[std::runtime_error]
	No exception thrown

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 84
	Exception thrown but of wrong type

	Expected Exception Type:
	[std::runtime_error]
	Unexpected exception thrown (caught by std::exception&):
	"Error"

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 85
	Exception thrown but of unknown type

	Expected Exception Type:
	[std::runtime_error]
	Unknown exception thrown

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 90
	Empty vector check which should fail

	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Container size wrong
	[long]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 91
	One element vector check which should fail due to wrong value

	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Element 0 of range incorrect
	[double]
	operator== returned false
	Obtained : 1
	Predicted: 2
	Advice   : Vector element advice

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 93
	One element vector check which should fail due to differing sizes

	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Container size wrong
	[long]
	operator== returned false
	Obtained : 1
	Predicted: 2

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 94
	Multi-element vector comparison which should fail due to last element

	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Element 1 of range incorrect
	[double]
	operator== returned false
	Obtained : 5
	Predicted: 4

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 95
	Multi-element vector comparison which should fail due to first element

	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Element 0 of range incorrect
	[double]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 96
	Multi-element vector comparison which should fail due to middle element

	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Element 2 of range incorrect
	[double]
	operator== returned false
	Obtained : 3.2
	Predicted: 3.3

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 97
	Multi-element vector comparison which should fail due to different sizes

	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Container size wrong
	[long]
	operator== returned false
	Obtained : 3
	Predicted: 2

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 101
	Iterators demarcate differing number of elements

	Container size wrong
	[long]
	operator== returned false
	Obtained : 4
	Predicted: 6

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 102
	Iterators demarcate differing elements

	Element 0 of range incorrect
	[float]
	operator== returned false
	Obtained : -4.3
	Predicted: 1.1

	Element 1 of range incorrect
	[float]
	operator== returned false
	Obtained : 2.8
	Predicted: -4.3

	Element 2 of range incorrect
	[float]
	operator== returned false
	Obtained : 6.2
	Predicted: 2.8

	Element 3 of range incorrect
	[float]
	operator== returned false
	Obtained : 7.3
	Predicted: 6.2

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 105
	Strings of differing length

	[std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >]
	operator== returned false

	Container size wrong
	[long]
	operator== returned false
	Obtained : 6
	Predicted: 13

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 106
	Differing strings of same length

	[std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >]
	operator== returned false

	Element 7 of range incorrect
	[char]
	operator== returned false
	Obtained : w
	Predicted: W

	Element 12 of range incorrect
	[char]
	operator== returned false
	Obtained : ?
	Predicted: !

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 120

	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]
	operator== returned false

	Element 0 of tuple incorrect
	[std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >]
	operator== returned false

	Element 0 of range incorrect
	[std::__1::pair<int, float>]
	operator== returned false

	First element of pair is incorrect
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 2
	Advice   : Nested int advice

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 125

	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]
	operator== returned false

	Element 1 of tuple incorrect
	[std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >]
	operator== returned false

	Element 2 of range incorrect
	[double]
	operator== returned false
	Obtained : 3.3
	Predicted: 3.4

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 131
	Broken equality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 132
	Broken inequality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 133
	Broken copy

	--Regular Semantics--
	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 2 

	Inconsistent Swap (y)
	[sequoia::testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent Swap (x)
	[sequoia::testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 134
	Broken move

	--Regular Semantics--
	Inconsistent move construction
	[sequoia::testing::broken_move<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 135
	Broken copy assignment

	--Regular Semantics--
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 136
	Broken move assignment

	--Regular Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 137
	Broken swap

	--Regular Semantics--
	Inconsistent Swap (y)
	[sequoia::testing::broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 

	Inconsistent Swap (x)
	[sequoia::testing::broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 138
	Broken copy value semantics

	--Regular Semantics--
	Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 139
	Broken copy assignment value semantics

	--Regular Semantics--
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 141
	Broken check invariant

	--Regular Semantics--
	Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 146

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[char [3]]
	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]
	operator== returned false

	Container size wrong
	[long]
	operator== returned false
	Obtained : 3
	Predicted: 2

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 147

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[char [4]]
	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]
	operator== returned false

	Element 2 of range incorrect
	[char]
	operator== returned false
	Obtained : o
	Predicted: b
	Advice   : Sort your chars out!

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 151

	[std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >]
	Element 1 of range incorrect
	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]
	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]
	operator== returned false

	Element 0 of range incorrect
	[char]
	operator== returned false
	Obtained : b
	Predicted: c

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 153

	[std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >]
	Element 1 of range incorrect
	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]
	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]
	operator== returned false

	Element 0 of range incorrect
	[char]
	operator== returned false
	Obtained : b
	Predicted: c
	Advice   : Ah, chars. So easy to get wrong.

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 161

	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]
	Element 1 of range incorrect
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 162

	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]
	Element 1 of range incorrect
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1
	Advice   : Don't mess with the beast.

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 167

	[std::__1::vector<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> >, std::__1::allocator<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> > > >]
	Element 1 of range incorrect
	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]
	Element 1 of range incorrect
	[int]
	operator== returned false
	Obtained : 4
	Predicted: 5

	=======================================

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 168

	[std::__1::vector<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> >, std::__1::allocator<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> > > >]
	Element 1 of range incorrect
	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]
	Element 1 of range incorrect
	[int]
	operator== returned false
	Obtained : 4
	Predicted: 5
	Advice   : Or at least don't mess with a vector of beasts.

	=======================================

	../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 26
	Broken equality

	--Move-only Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 27
	Broken inequality

	--Move-only Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 28
	Broken move

	--Move-only Semantics--
	Inconsistent move construction
	[sequoia::testing::move_only_broken_move<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent Swap (y)
	[sequoia::testing::move_only_broken_move<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	=======================================

	../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 29
	Broken swap

	--Move-only Semantics--
	Inconsistent Swap (y)
	[sequoia::testing::move_only_broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 

	Inconsistent Swap (x)
	[sequoia::testing::move_only_broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 30
	Broken move assignment

	--Move-only Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_move_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 31
	Broken check invariant

	--Move-only Semantics--
	Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 32
	Broken check invariant

	--Move-only Semantics--
	Precondition - for checking regular semantics, x and xClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 33
	Broken check invariant

	--Move-only Semantics--
	Precondition - for checking regular semantics, x and xClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/PerformanceTestDiagnostics.cpp, Line 30
	Performance Test for which fast task is too slow, [1, (2.0, 2.0)

	Fast Task duration: 0.00135379s +- 4 * 5.59299e-05
	Slow Task duration: 0.00135826s +- 4 * 8.51003e-05 [1.00331; (2, 2)]

	=======================================

	../Tests/TestFramework/PerformanceTestDiagnostics.cpp, Line 34
	Performance Test for which fast task is too slow [1, (2.0, 3.0)

	Fast Task duration: 0.00128265s +- 4 * 0.000109197
	Slow Task duration: 0.00134182s +- 4 * 4.64604e-05 [1.04613; (2, 3)]

	=======================================

	../Tests/TestFramework/PerformanceTestDiagnostics.cpp, Line 38
	Performance Test for which fast task is too fast [4, (2.0, 2.5)]

	Fast Task duration: 0.00121259s +- 4 * 8.52385e-05
	Slow Task duration: 0.00465357s +- 4 * 0.000507564 [3.83772; (2, 2.5)]

	=======================================

	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 29

	[double]
	Obtained : 3
	Predicted: 5 +/- 1

	=======================================

	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 30

	[double]
	Obtained : 7
	Predicted: 5 +/- 1

	=======================================

	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 32

	[double]
	Fuzzy comparison failed
	Obtained : 1
	Predicted: 2

	=======================================

	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 40

	Element 0 of range incorrect
	[double]
	Obtained : 0.5
	Predicted: -0.1 +/- 0.5

	=======================================

	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 43

	Element 1 of range incorrect
	[double]
	Obtained : 0.6
	Predicted: 1.2 +/- 0.5

	=======================================

	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 48

	Element 1 of range incorrect
	[double]
	Obtained : -1
	Predicted: -1.8 +/- 0.5

	=======================================

	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 51

	Element 1 of range incorrect
	Element 0 of range incorrect
	[double]
	Obtained : 5.1
	Predicted: 3.7 +/- 0.5

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52
	Broken equality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60
	Broken inequality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68
	Broken equality

	--Regular Semantics--
	Unexpected allocation detected for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77
	Broken copy

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85
	Broken copy alloc

	--Regular Semantics--
	Inconsistent para-copy construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent para-move construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93
	Broken move

	--Regular Semantics--
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101
	Broken move alloc

	--Regular Semantics--
	Inconsistent para-move construction
	[sequoia::testing::broken_para_move<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109
	Inefficient move

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117
	Broken copy assignment

	--Regular Semantics--
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125
	Broken move assignment

	--Regular Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139
	Broken copy value semantics

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Mutation is not doing anything following move
	assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154
	Broken copy assignment value semantics

	--Regular Semantics--
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194
	Broken check invariant

	--Regular Semantics--
	Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52
	Broken equality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60
	Broken inequality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68
	Broken equality

	--Regular Semantics--
	Unexpected allocation detected for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1

	Unexpected allocation detected following mutation after swap (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77
	Broken copy

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent Swap (y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent Swap (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85
	Broken copy alloc

	--Regular Semantics--
	Inconsistent para-copy construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent para-move construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93
	Broken move

	--Regular Semantics--
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101
	Broken move alloc

	--Regular Semantics--
	Inconsistent para-move construction
	[sequoia::testing::broken_para_move<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109
	Inefficient move

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117
	Broken copy assignment

	--Regular Semantics--
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125
	Broken move assignment

	--Regular Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139
	Broken copy value semantics

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Mutation is not doing anything following move
	assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154
	Broken copy assignment value semantics

	--Regular Semantics--
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194
	Broken check invariant

	--Regular Semantics--
	Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52
	Broken equality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60
	Broken inequality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68
	Broken equality

	--Regular Semantics--
	Unexpected allocation detected for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77
	Broken copy

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85
	Broken copy alloc

	--Regular Semantics--
	Inconsistent para-copy construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent para-move construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93
	Broken move

	--Regular Semantics--
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101
	Broken move alloc

	--Regular Semantics--
	Inconsistent para-move construction
	[sequoia::testing::broken_para_move<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109
	Inefficient move

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117
	Broken copy assignment

	--Regular Semantics--
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125
	Broken move assignment

	--Regular Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139
	Broken copy value semantics

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Mutation is not doing anything following move
	assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154
	Broken copy assignment value semantics

	--Regular Semantics--
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194
	Broken check invariant

	--Regular Semantics--
	Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52
	Broken equality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60
	Broken inequality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68
	Broken equality

	--Regular Semantics--
	Unexpected allocation detected for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1

	Unexpected allocation detected following mutation after swap (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77
	Broken copy

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Inconsistent Swap (y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent Swap (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85
	Broken copy alloc

	--Regular Semantics--
	Inconsistent para-copy construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent para-move construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93
	Broken move

	--Regular Semantics--
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101
	Broken move alloc

	--Regular Semantics--
	Inconsistent para-move construction
	[sequoia::testing::broken_para_move<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109
	Inefficient move

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117
	Broken copy assignment

	--Regular Semantics--
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125
	Broken move assignment

	--Regular Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139
	Broken copy value semantics

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Mutation is not doing anything following move
	assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154
	Broken copy assignment value semantics

	--Regular Semantics--
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194
	Broken check invariant

	--Regular Semantics--
	Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52
	Broken equality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60
	Broken inequality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68
	Broken equality

	--Regular Semantics--
	Unexpected allocation detected for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77
	Broken copy

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85
	Broken copy alloc

	--Regular Semantics--
	Inconsistent para-copy construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent para-move construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93
	Broken move

	--Regular Semantics--
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101
	Broken move alloc

	--Regular Semantics--
	Inconsistent para-move construction
	[sequoia::testing::broken_para_move<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109
	Inefficient move

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117
	Broken copy assignment

	--Regular Semantics--
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125
	Broken move assignment

	--Regular Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139
	Broken copy value semantics

	--Regular Semantics--
	Mutation is not doing anything following move
	assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154
	Broken copy assignment value semantics

	--Regular Semantics--
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194
	Broken check invariant

	--Regular Semantics--
	Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52
	Broken equality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60
	Broken inequality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68
	Broken equality

	--Regular Semantics--
	Unexpected allocation detected for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1

	Unexpected allocation detected following mutation after swap (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77
	Broken copy

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent Swap (y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent Swap (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85
	Broken copy alloc

	--Regular Semantics--
	Inconsistent para-copy construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent para-move construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93
	Broken move

	--Regular Semantics--
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101
	Broken move alloc

	--Regular Semantics--
	Inconsistent para-move construction
	[sequoia::testing::broken_para_move<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109
	Inefficient move

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117
	Broken copy assignment

	--Regular Semantics--
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125
	Broken move assignment

	--Regular Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139
	Broken copy value semantics

	--Regular Semantics--
	Mutation is not doing anything following move
	assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154
	Broken copy assignment value semantics

	--Regular Semantics--
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194
	Broken check invariant

	--Regular Semantics--
	Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52
	Broken equality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60
	Broken inequality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68
	Broken equality

	--Regular Semantics--
	Unexpected allocation detected for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77
	Broken copy

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85
	Broken copy alloc

	--Regular Semantics--
	Inconsistent para-copy construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent para-move construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93
	Broken move

	--Regular Semantics--
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101
	Broken move alloc

	--Regular Semantics--
	Inconsistent para-move construction
	[sequoia::testing::broken_para_move<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109
	Inefficient move

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117
	Broken copy assignment

	--Regular Semantics--
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125
	Broken move assignment

	--Regular Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 0
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139
	Broken copy value semantics

	--Regular Semantics--
	Mutation is not doing anything following move
	assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154
	Broken copy assignment value semantics

	--Regular Semantics--
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194
	Broken check invariant

	--Regular Semantics--
	Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52
	Broken equality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60
	Broken inequality

	--Regular Semantics--
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68
	Broken equality

	--Regular Semantics--
	Unexpected allocation detected for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1

	Unexpected allocation detected following mutation after swap (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77
	Broken copy

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Inconsistent Swap (y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 

	Inconsistent Swap (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85
	Broken copy alloc

	--Regular Semantics--
	Inconsistent para-copy construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent para-move construction
	[sequoia::testing::broken_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93
	Broken move

	--Regular Semantics--
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101
	Broken move alloc

	--Regular Semantics--
	Inconsistent para-move construction
	[sequoia::testing::broken_para_move<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109
	Inefficient move

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117
	Broken copy assignment

	--Regular Semantics--
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125
	Broken move assignment

	--Regular Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 

	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 0
	Advice   : A negative allocation count generally indicates an allocator propagting when it shouldn't or not propagating when it should.

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139
	Broken copy value semantics

	--Regular Semantics--
	Mutation is not doing anything following move
	assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154
	Broken copy assignment value semantics

	--Regular Semantics--
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	Mutation is not doing anything following move
	allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194
	Broken check invariant

	--Regular Semantics--
	Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238
	Incorrect copy x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242
	Incorrect copy y allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-copy construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252
	Incorrect copy assign y to x allocs

	--Regular Semantics--
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for copy assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected for copy assignment (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256
	Incorrect mutation allocs

	--Regular Semantics--
	mutation after move
	assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	Unexpected allocation detected following mutation after swap (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 59

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72

	--Move-only Semantics--
	Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84

	--Move-only Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 59

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72

	--Move-only Semantics--
	Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84

	--Move-only Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98

	--Move-only Semantics--
	Inconsistent Swap (y)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 

	Inconsistent Swap (x)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72

	--Move-only Semantics--
	Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84

	--Move-only Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for para-move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72

	--Move-only Semantics--
	Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84

	--Move-only Semantics--
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98

	--Move-only Semantics--
	Inconsistent Swap (y)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 

	Inconsistent Swap (x)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for move construction (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	Unexpected allocation detected (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122

	--Move-only Semantics--
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Unexpected allocation detected for move assignment (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0

	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 192

	[bool]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 194

	[int]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 195

	[double]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 197

	[std::__1::pair<int, double>]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 199

	[std::__1::tuple<int, double, float>]


	=======================================

	False Positive Failure:
		../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 201

	Expected Exception Type:
	[std::runtime_error]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 206
	Empty vector check which should pass

	[std::__1::vector<double, std::__1::allocator<double> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 207
	One element vector check which should pass

	[std::__1::vector<double, std::__1::allocator<double> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 208
	Multi-element vector comparison which should pass

	[std::__1::vector<double, std::__1::allocator<double> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 212
	Iterators demarcate identical elements


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 214
	Differing strings

	[std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 227

	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 232

	--Regular Semantics--


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 237

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[char [4]]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 239

	[std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 245

	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 248

	[std::__1::vector<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> >, std::__1::allocator<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> > > >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 50

	--Move-only Semantics--
	[sequoia::testing::move_only_beast<int, std::__1::allocator<int> >]


	=======================================

	False Positive Failure:
		../Tests/TestFramework/PerformanceTestDiagnostics.cpp, Line 67
	Performance Test which should pass

	Fast Task duration: 0.00121323s +- 4 * 0.000134468
	Slow Task duration: 0.00234965s +- 4 * 0.000212757 [1.93669; (1.8, 2.1)]


	=======================================

	False Positive Failure:
		../Tests/TestFramework/PerformanceTestDiagnostics.cpp, Line 68
	Performance Test which should pass

	Fast Task duration: 0.00130751s +- 4 * 9.64645e-05
	Slow Task duration: 0.00492446s +- 4 * 0.000479347 [3.76629; (3.6, 4.1)]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 69

	[double]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 70

	[double]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 72

	[double]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 73

	[double]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 79


	=======================================

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 84

	[std::__1::vector<double, std::__1::allocator<double> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 87

	[std::__1::vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332

	--Regular Semantics--
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347

	--Regular Semantics--
	[sequoia::testing::inefficient_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369

	--Regular Semantics--
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, false, false, false>, sequoia::testing::shared_counting_allocator<double, false, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332

	--Regular Semantics--
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347

	--Regular Semantics--
	[sequoia::testing::inefficient_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369

	--Regular Semantics--
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, false, false, true>, sequoia::testing::shared_counting_allocator<double, false, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332

	--Regular Semantics--
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347

	--Regular Semantics--
	[sequoia::testing::inefficient_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369

	--Regular Semantics--
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, false, true, false>, sequoia::testing::shared_counting_allocator<double, false, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332

	--Regular Semantics--
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347

	--Regular Semantics--
	[sequoia::testing::inefficient_para_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369

	--Regular Semantics--
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, false, true, true>, sequoia::testing::shared_counting_allocator<double, false, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332

	--Regular Semantics--
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347

	--Regular Semantics--
	[sequoia::testing::inefficient_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369

	--Regular Semantics--
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, true, false, false>, sequoia::testing::shared_counting_allocator<double, true, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332

	--Regular Semantics--
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347

	--Regular Semantics--
	[sequoia::testing::inefficient_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369

	--Regular Semantics--
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, true, false, true>, sequoia::testing::shared_counting_allocator<double, true, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332

	--Regular Semantics--
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347

	--Regular Semantics--
	[sequoia::testing::inefficient_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369

	--Regular Semantics--
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, true, true, false>, sequoia::testing::shared_counting_allocator<double, true, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317

	--Regular Semantics--
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332

	--Regular Semantics--
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347

	--Regular Semantics--
	[sequoia::testing::inefficient_para_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369

	--Regular Semantics--
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, true, true, true>, sequoia::testing::shared_counting_allocator<double, true, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162

	--Move-only Semantics--
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165

	--Move-only Semantics--
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162

	--Move-only Semantics--
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165

	--Move-only Semantics--
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162

	--Move-only Semantics--
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165

	--Move-only Semantics--
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162

	--Move-only Semantics--
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]


	=======================================

	False Positive Failure:
	../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165

	--Move-only Semantics--
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]


	=======================================

