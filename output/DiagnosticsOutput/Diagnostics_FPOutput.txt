	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 46
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 48
	[int]
	operator== returned false
	Obtained : 5
	Predicted: 4


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 49
	[double]
	operator== returned false
	Obtained : 6.5
	Predicted: 5.6


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 51
	[std::__1::pair<int, double>]
	operator== returned false

	Second element of pair is incorrect
	[double]
	operator== returned false
	Obtained : 7.8
	Predicted: -7.8


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 52
	[std::__1::pair<int, double>]
	operator== returned false

	First element of pair is incorrect
	[int]
	operator== returned false
	Obtained : 5
	Predicted: -5


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 53
	[std::__1::pair<int, double>]
	operator== returned false

	First element of pair is incorrect
	[int]
	operator== returned false
	Obtained : 5
	Predicted: -5


	Second element of pair is incorrect
	[double]
	operator== returned false
	Obtained : 7.8
	Predicted: 6.8


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 55
	[std::__1::tuple<int, double, float>]
	operator== returned false

	Element 0 of tuple incorrect
	[int]
	operator== returned false
	Obtained : 4
	Predicted: 0


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 56
	[std::__1::tuple<int, double, float>]
	operator== returned false

	Element 1 of tuple incorrect
	[double]
	operator== returned false
	Obtained : 3.4
	Predicted: 0


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 57
	[std::__1::tuple<int, double, float>]
	operator== returned false

	Element 2 of tuple incorrect
	[float]
	operator== returned false
	Obtained : -9.2
	Predicted: -0


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 59:
	Exception expected but nothing thrown
	Expected Exception Type:
	[std::runtime_error]
	No exception thrown

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 60:
	Exception thrown but of wrong type
	Expected Exception Type:
	[std::runtime_error]
	Unexpected exception thrown (caught by std::exception&):
	"Error"

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 61:
	Exception thrown but of unknown type
	Expected Exception Type:
	[std::runtime_error]
	Unknown exception thrown

	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 66:
	Empty vector check which should fail
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Container size wrong
	[long]
	operator== returned false
	Obtained : 0
	Predicted: 1


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 67:
	One element vector check which should fail due to wrong value
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Element 0 of range incorrect
	[double]
	operator== returned false
	Obtained : 1
	Predicted: 2


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 68:
	One element vector check which should fail due to differing sizes
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Container size wrong
	[long]
	operator== returned false
	Obtained : 1
	Predicted: 2


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 69:
	Multi-element vector comparison which should fail due to last element
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Element 1 of range incorrect
	[double]
	operator== returned false
	Obtained : 5
	Predicted: 4


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 70:
	Multi-element vector comparison which should fail due to first element
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Element 0 of range incorrect
	[double]
	operator== returned false
	Obtained : 1
	Predicted: 0


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 71:
	Multi-element vector comparison which should fail due to middle element
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Element 2 of range incorrect
	[double]
	operator== returned false
	Obtained : 3.2
	Predicted: 3.3


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 72:
	Multi-element vector comparison which should fail due to different sizes
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	Container size wrong
	[long]
	operator== returned false
	Obtained : 3
	Predicted: 2


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 76:
	Iterators demarcate differing number of elements
	Container size wrong
	[long]
	operator== returned false
	Obtained : 4
	Predicted: 6


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 77:
	Iterators demarcate differing elements
	Element 0 of range incorrect
	[float]
	operator== returned false
	Obtained : -4.3
	Predicted: 1.1


	Element 1 of range incorrect
	[float]
	operator== returned false
	Obtained : 2.8
	Predicted: -4.3


	Element 2 of range incorrect
	[float]
	operator== returned false
	Obtained : 6.2
	Predicted: 2.8


	Element 3 of range incorrect
	[float]
	operator== returned false
	Obtained : 7.3
	Predicted: 6.2


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 80:
	Strings of differing length
	[std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >]
	operator== returned false

	Container size wrong
	[long]
	operator== returned false
	Obtained : 6
	Predicted: 13


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 81:
	Differing strings of same length
	[std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >]
	operator== returned false

	Element 7 of range incorrect
	[char]
	operator== returned false
	Obtained : w
	Predicted: W


	Element 12 of range incorrect
	[char]
	operator== returned false
	Obtained : ?
	Predicted: !


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 95
	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]
	operator== returned false

	Element 0 of tuple incorrect
	[std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >]
	operator== returned false

	Element 0 of range incorrect
	[std::__1::pair<int, float>]
	operator== returned false

	First element of pair is incorrect
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 2


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 100
	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]
	operator== returned false

	Element 1 of tuple incorrect
	[std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >]
	operator== returned false

	Element 2 of range incorrect
	[double]
	operator== returned false
	Obtained : 3.3
	Predicted: 3.4


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 106:
	Broken equality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 107:
	Broken inequality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 108:
	Broken copy
	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 108:
	Broken copy
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 2 


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 108:
	Broken copy
	Inconsistent Swap (y)
	[sequoia::testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 108:
	Broken copy
	Inconsistent Swap (x)
	[sequoia::testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 2 


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 109:
	Broken move
	Inconsistent move construction
	[sequoia::testing::broken_move<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 2 


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 110:
	Broken copy assignment
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 110:
	Broken copy assignment
	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 111:
	Broken move assignment
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 112:
	Broken swap
	Inconsistent Swap (y)
	[sequoia::testing::broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 112:
	Broken swap
	Inconsistent Swap (x)
	[sequoia::testing::broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 113:
	Broken copy value semantics
	Either mutation is not doing anything following copy constrution or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 113:
	Broken copy value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 114:
	Broken copy assignment value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 116:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 121
	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[char [3]]

	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]
	operator== returned false

	Container size wrong
	[long]
	operator== returned false
	Obtained : 3
	Predicted: 2


	Element 1 of range incorrect
	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]

	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]
	operator== returned false

	Element 0 of range incorrect
	[char]
	operator== returned false
	Obtained : b
	Predicted: c


	Element 1 of range incorrect
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Element 1 of range incorrect
	[int]
	operator== returned false
	Obtained : 4
	Predicted: 5


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 26:
	Broken equality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 27:
	Broken inequality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 28:
	Broken move
	Inconsistent move construction
	[sequoia::testing::move_only_broken_move<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 28:
	Broken move
	Inconsistent Swap (y)
	[sequoia::testing::move_only_broken_move<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 29:
	Broken swap
	Inconsistent Swap (y)
	[sequoia::testing::move_only_broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 29:
	Broken swap
	Inconsistent Swap (x)
	[sequoia::testing::move_only_broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 29:
	Broken swap
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 30:
	Broken move assignment
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_move_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 31:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 32:
	Broken check invariant
	Precondition - for checking regular semantics, x and xClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 33:
	Broken check invariant
	Precondition - for checking regular semantics, x and xClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	../Tests/TestFramework/PerformanceTestDiagnostics.cpp, Line 30:
	Performance Test for which fast task is too slow, [1, (2.0, 2.0)
	Fast Task duration: 0.00120922s +- 4 * 0.000171139
	Slow Task duration: 0.00139641s +- 4 * 0.000207977 [1.1548; (2, 2)]

	../Tests/TestFramework/PerformanceTestDiagnostics.cpp, Line 34:
	Performance Test for which fast task is too slow [1, (2.0, 3.0)
	Fast Task duration: 0.00136416s +- 4 * 7.62193e-05
	Slow Task duration: 0.0012394s +- 4 * 9.48704e-05 [0.908546; (2, 3)]

	../Tests/TestFramework/PerformanceTestDiagnostics.cpp, Line 38:
	Performance Test for which fast task is too fast [4, (2.0, 2.5)]
	Fast Task duration: 0.00133379s +- 4 * 8.85064e-05
	Slow Task duration: 0.00477773s +- 4 * 0.000452585 [3.58207; (2, 2.5)]

	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 29
	[double]
	Obtained : 3
	Predicted: 5 +/- 1

	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 30
	[double]
	Obtained : 7
	Predicted: 5 +/- 1

	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 32
	[double]
	Fuzzy comparison failed
	Obtained : 1
	Predicted: 2


	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 40
	Element 0 of range incorrect
	[double]
	Obtained : 0.5
	Predicted: -0.1 +/- 0.5

	Element 1 of range incorrect
	[double]
	Obtained : 0.6
	Predicted: 1.2 +/- 0.5

	Element 1 of range incorrect
	[double]
	Obtained : -1
	Predicted: -1.8 +/- 0.5

	Element 1 of range incorrect
	Element 0 of range incorrect
	[double]
	Obtained : 5.1
	Predicted: 3.7 +/- 0.5

	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52:
	Broken equality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60:
	Broken inequality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator== no allocation for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator!= no allocation for operator!=
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-copy construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_move_alloc<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109:
	Inefficient move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Either mutation is not doing anything following copy constrution or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203:
	Incorrect copy x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238:
	Incorrect copy x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52:
	Broken equality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60:
	Broken inequality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator== no allocation for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator!= no allocation for operator!=
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent Swap (y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent Swap (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-copy construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_move_alloc<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109:
	Inefficient move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Either mutation is not doing anything following copy constrution or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203:
	Incorrect copy x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238:
	Incorrect copy x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after swap
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52:
	Broken equality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60:
	Broken inequality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator== no allocation for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator!= no allocation for operator!=
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-copy construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_move_alloc<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109:
	Inefficient move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Either mutation is not doing anything following copy constrution or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203:
	Incorrect copy x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238:
	Incorrect copy x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52:
	Broken equality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60:
	Broken inequality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator== no allocation for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator!= no allocation for operator!=
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent Swap (y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent Swap (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-copy construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_move_alloc<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109:
	Inefficient move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Either mutation is not doing anything following copy constrution or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203:
	Incorrect copy x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238:
	Incorrect copy x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after swap
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = false,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52:
	Broken equality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60:
	Broken inequality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator== no allocation for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator!= no allocation for operator!=
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-copy construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_move_alloc<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109:
	Inefficient move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Either mutation is not doing anything following copy constrution or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203:
	Incorrect copy x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238:
	Incorrect copy x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52:
	Broken equality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60:
	Broken inequality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator== no allocation for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator!= no allocation for operator!=
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent Swap (y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent Swap (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-copy construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_move_alloc<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109:
	Inefficient move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Either mutation is not doing anything following copy constrution or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203:
	Incorrect copy x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238:
	Incorrect copy x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after swap
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52:
	Broken equality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60:
	Broken inequality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator== no allocation for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator!= no allocation for operator!=
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-copy construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_move_alloc<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109:
	Inefficient move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Either mutation is not doing anything following copy constrution or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203:
	Incorrect copy x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238:
	Incorrect copy x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 52:
	Broken equality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 60:
	Broken inequality
	Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator== no allocation for operator==
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	Unexpected allocation detected for operator!= no allocation for operator!=
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	No allocation for x
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 68:
	Broken equality mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent copy constructor (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent Swap (y)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy
	Inconsistent Swap (x)
	[sequoia::testing::broken_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 77:
	Broken copy Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-copy construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 85:
	Broken copy alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	Inconsistent para-move construction
	[sequoia::testing::broken_move<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 93:
	Broken move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	Inconsistent para-move construction
	[sequoia::testing::broken_move_alloc<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 101:
	Broken move alloc
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 109:
	Inefficient move
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent move construction
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 117:
	Broken copy assignment
	Inconsistent copy assignment (from mutated y)
	[sequoia::testing::broken_copy_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	Inconsistent move assignment (from y)
	[sequoia::testing::broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 125:
	Broken move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Either mutation is not doing anything following copy constrution or value semantics are broken, with mutation of an object also changing the object from which it was copied
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 139:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics
	Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 154:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 169
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 170
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 185
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 194:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 203:
	Incorrect copy x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 207:
	Incorrect copy y allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 217:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after swap
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 221:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 238:
	Incorrect copy x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 242:
	Incorrect copy y allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 252:
	Incorrect copy assign y to x allocs
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after swap
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 256:
	Incorrect mutation allocs mutation after move allocation assignment
	[shared_counting_allocator<
		std::__1::shared_ptr<int>,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]

	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 59
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72
	Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 59
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72
	Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98
	Inconsistent Swap (y)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98
	Inconsistent Swap (x)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = false,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72
	Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = false
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72
	Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_move_assignment<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98
	Inconsistent Swap (y)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98
	Inconsistent Swap (x)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98
	Inconsistent move assignment (from y)
	[sequoia::testing::move_only_broken_swap<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122
	[shared_counting_allocator<
		int,
		Propagate on copy assignment = true,
		Propagate on move assignment = true,
		Propagate on swap = true
	>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 153
	[bool]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 155
	[int]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 156
	[double]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 158
	[std::__1::pair<int, double>]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 160
	[std::__1::tuple<int, double, float>]

	False Positive Failure:
		../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 162
	Expected Exception Type:
	[std::runtime_error]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 167:
	Empty vector check which should pass
	[std::__1::vector<double, std::__1::allocator<double> >]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 168:
	One element vector check which should pass
	[std::__1::vector<double, std::__1::allocator<double> >]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 169:
	Multi-element vector comparison which should pass
	[std::__1::vector<double, std::__1::allocator<double> >]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 173:
	Iterators demarcate identical elements
	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 175:
	Differing strings
	[std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 188
	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 193
	[sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> >]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 198
	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[char [4]]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 200
	[std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 206
	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]

	False Positive Failure:
	../Tests/TestFramework/UnitTestDiagnostics.cpp, Line 209
	[std::__1::vector<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> >, std::__1::allocator<sequoia::testing::perfectly_normal_beast<int, std::__1::allocator<int> > > >]

	False Positive Failure:
	Move-only Semantics ../Tests/TestFramework/MoveOnlyTestDiagnostics.cpp, Line 50
	[sequoia::testing::move_only_beast<int, std::__1::allocator<int> >]

	False Positive Failure:
		../Tests/TestFramework/PerformanceTestDiagnostics.cpp, Line 67:
	Performance Test which should pass
	Fast Task duration: 0.00133757s +- 4 * 0.000105377
	Slow Task duration: 0.002476s +- 4 * 0.000240904 [1.85111; (1.8, 2.1)]

	False Positive Failure:
		../Tests/TestFramework/PerformanceTestDiagnostics.cpp, Line 68:
	Performance Test which should pass
	Fast Task duration: 0.00138479s +- 4 * 0.000212982
	Slow Task duration: 0.00472962s +- 4 * 0.000400891 [3.4154; (3.6, 4.1)]

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 69
	[double]

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 70
	[double]

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 72
	[double]

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 73
	[double]

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 79
	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 84
	[std::__1::vector<double, std::__1::allocator<double> >]

	False Positive Failure:
	../Tests/TestFramework/FuzzyTestDiagnostics.cpp, Line 87
	[std::__1::vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347
	[sequoia::testing::inefficient_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, false, false, false>, sequoia::testing::shared_counting_allocator<double, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347
	[sequoia::testing::inefficient_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, false, false, true>, sequoia::testing::shared_counting_allocator<double, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347
	[sequoia::testing::inefficient_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, false, true, false>, sequoia::testing::shared_counting_allocator<double, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347
	[sequoia::testing::inefficient_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, false, true, true>, sequoia::testing::shared_counting_allocator<double, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347
	[sequoia::testing::inefficient_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, true, false, false>, sequoia::testing::shared_counting_allocator<double, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347
	[sequoia::testing::inefficient_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, true, false, true>, sequoia::testing::shared_counting_allocator<double, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347
	[sequoia::testing::inefficient_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, true, true, false>, sequoia::testing::shared_counting_allocator<double, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 298
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 300
	[sequoia::testing::perfectly_normal_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 315
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 317
	[sequoia::testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 332
	[sequoia::testing::inefficient_copy<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 347
	[sequoia::testing::inefficient_copy_alloc<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../Tests/TestFramework/RegularAllocationTestDiagnostics.cpp, Line 369
	[sequoia::testing::doubly_normal_beast<int, double, sequoia::testing::shared_counting_allocator<int, true, true, true>, sequoia::testing::shared_counting_allocator<double, true, true, true> >]

	False Positive Failure:
	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]

	False Positive Failure:
	Move-only Semantics ../Tests/TestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165
	[sequoia::testing::move_only_beast<int, sequoia::testing::shared_counting_allocator<int, true, true, true> >]

