	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 46
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 48
	[int]
	operator== returned false
	Obtained : 5
	Predicted: 4


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 49
	[double]
	operator== returned false
	Obtained : 6.5
	Predicted: 5.6


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 51
	[std::__1::pair<int, double>]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 51
	[std::__1::pair<int, double>]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 51
	Second element of pair is incorrect
	[double]
	operator== returned false
	Obtained : 7.8
	Predicted: -7.8


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 52
	[std::__1::pair<int, double>]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 52
	[std::__1::pair<int, double>]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 52
	First element of pair is incorrect
	[int]
	operator== returned false
	Obtained : 5
	Predicted: -5


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 54
	[std::__1::tuple<int, double, float>]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 54
	[std::__1::tuple<int, double, float>]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 54
	Element 0 of tuple incorrect
	[int]
	operator== returned false
	Obtained : 4
	Predicted: 0


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 55
	[std::__1::tuple<int, double, float>]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 55
	[std::__1::tuple<int, double, float>]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 55
	Element 1 of tuple incorrect
	[double]
	operator== returned false
	Obtained : 3.4
	Predicted: 0


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 56
	[std::__1::tuple<int, double, float>]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 56
	[std::__1::tuple<int, double, float>]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 56
	Element 2 of tuple incorrect
	[float]
	operator== returned false
	Obtained : -9.2
	Predicted: -0


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 58:
	Exception expected but nothing thrown
	Expected Exception Type:
	[std::runtime_error]
	No exception thrown

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 59:
	Exception thrown but of wrong type
	Expected Exception Type:
	[std::runtime_error]
	Unexpected exception thrown (caught by std::exception&):
	"Error"

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 60:
	Exception thrown but of unknown type
	Expected Exception Type:
	[std::runtime_error]
	Unknown exception thrown

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 65:
	Empty vector check which should fail
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 65:
	Empty vector check which should fail
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 65:
	Empty vector check which should fail
	Container size wrong
	[long]
	operator== returned false
	Obtained : 0
	Predicted: 1


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 66:
	One element vector check which should fail due to wrong value
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 66:
	One element vector check which should fail due to wrong value
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 66:
	One element vector check which should fail due to wrong value
	element 0

	[double]
	operator== returned false
	Obtained : 1
	Predicted: 2


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 67:
	One element vector check which should fail due to differing sizes
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 67:
	One element vector check which should fail due to differing sizes
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 67:
	One element vector check which should fail due to differing sizes
	Container size wrong
	[long]
	operator== returned false
	Obtained : 1
	Predicted: 2


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 68:
	Multi-element vector comparison which should fail due to last element
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 68:
	Multi-element vector comparison which should fail due to last element
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 68:
	Multi-element vector comparison which should fail due to last element
	element 1

	[double]
	operator== returned false
	Obtained : 5
	Predicted: 4


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 69:
	Multi-element vector comparison which should fail due to first element
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 69:
	Multi-element vector comparison which should fail due to first element
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 69:
	Multi-element vector comparison which should fail due to first element
	element 0

	[double]
	operator== returned false
	Obtained : 1
	Predicted: 0


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 70:
	Multi-element vector comparison which should fail due to middle element
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 70:
	Multi-element vector comparison which should fail due to middle element
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 70:
	Multi-element vector comparison which should fail due to middle element
	element 2

	[double]
	operator== returned false
	Obtained : 3.2
	Predicted: 3.3


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 71:
	Multi-element vector comparison which should fail due to different sizes
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 71:
	Multi-element vector comparison which should fail due to different sizes
	[std::__1::vector<double, std::__1::allocator<double> >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 71:
	Multi-element vector comparison which should fail due to different sizes
	Container size wrong
	[long]
	operator== returned false
	Obtained : 3
	Predicted: 2


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 75:
	Iterators demarcate differing number of elements
	Container size wrong
	[long]
	operator== returned false
	Obtained : 4
	Predicted: 6


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 76:
	Iterators demarcate differing elements
	element 0

	[float]
	operator== returned false
	Obtained : -4.3
	Predicted: 1.1


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 76:
	Iterators demarcate differing elements
	element 1

	[float]
	operator== returned false
	Obtained : 2.8
	Predicted: -4.3


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 76:
	Iterators demarcate differing elements
	element 2

	[float]
	operator== returned false
	Obtained : 6.2
	Predicted: 2.8


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 76:
	Iterators demarcate differing elements
	element 3

	[float]
	operator== returned false
	Obtained : 7.3
	Predicted: 6.2


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 79:
	Differing strings
	[std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >]
	operator== returned false
	Obtained : what?!
	Predicted: Hello, World!


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 93
	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 93
	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 93
	Element 0 of tuple incorrect
	[std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 93
	Element 0 of tuple incorrect
	[std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 93
	Element 0 of tuple incorrect
	element 0

	[std::__1::pair<int, float>]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 93
	Element 0 of tuple incorrect
	element 0

	[std::__1::pair<int, float>]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 93
	Element 0 of tuple incorrect
	element 0

	First element of pair is incorrect
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 2


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 98
	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 98
	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 98
	Element 1 of tuple incorrect
	[std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >]
	operator== returned false

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 98
	Element 1 of tuple incorrect
	[std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >]
	operator!= returned true

	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 98
	Element 1 of tuple incorrect
	element 2

	[double]
	operator== returned false
	Obtained : 3.3
	Predicted: 3.4


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 104:
	Broken equality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 105:
	Broken inequality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 106:
	Broken copy Copy constructor (x)
	[sequoia::unit_testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 106:
	Broken copy Equality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 106:
	Broken copy Move assignment (from y)
	[sequoia::unit_testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 2 


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 106:
	Broken copy Swap
	[sequoia::unit_testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 106:
	Broken copy Swap
	[sequoia::unit_testing::broken_copy<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 2 


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 107:
	Broken move Move constructor
	[sequoia::unit_testing::broken_move<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 2 


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 108:
	Broken copy assignment Copy assignment (from y)
	[sequoia::unit_testing::broken_copy_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 108:
	Broken copy assignment Inequality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 108:
	Broken copy assignment Move constructor
	[sequoia::unit_testing::broken_copy_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 109:
	Broken move assignment Move assignment (from y)
	[sequoia::unit_testing::broken_move_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 110:
	Broken swap Swap
	[sequoia::unit_testing::broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 110:
	Broken swap Swap
	[sequoia::unit_testing::broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 111:
	Broken copy value semantics Mutation is not doing anything following copy constrution/broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 111:
	Broken copy value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 112:
	Broken copy assignment value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 114:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 119
	Comparison performed using:
	[sequoia::unit_testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[char [3]]

	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]
	operator== returned false
	Obtained : foo
	Predicted: fo


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 121
	[std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >]

	element 1

	Comparison performed using:
	[sequoia::unit_testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]

	[std::__1::basic_string_view<char, std::__1::char_traits<char> >]
	operator== returned false
	Obtained : b
	Predicted: c


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 127
	Comparison performed using:
	[sequoia::unit_testing::weak_equivalence_checker<sequoia::unit_testing::perfectly_normal_beast<int, std::__1::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]

	element 1

	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 130
	[std::__1::vector<sequoia::unit_testing::perfectly_normal_beast<int, std::__1::allocator<int> >, std::__1::allocator<sequoia::unit_testing::perfectly_normal_beast<int, std::__1::allocator<int> > > >]

	element 1

	Comparison performed using:
	[sequoia::unit_testing::weak_equivalence_checker<sequoia::unit_testing::perfectly_normal_beast<int, std::__1::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]

	element 1

	[int]
	operator== returned false
	Obtained : 4
	Predicted: 5


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 26:
	Broken equality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 27:
	Broken inequality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 28:
	Broken move Move constructor
	[sequoia::unit_testing::move_only_broken_move<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 28:
	Broken move Swap
	[sequoia::unit_testing::move_only_broken_move<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 29:
	Broken swap Swap
	[sequoia::unit_testing::move_only_broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 29:
	Broken swap Swap
	[sequoia::unit_testing::move_only_broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 29:
	Broken swap Move assignment (from y)
	[sequoia::unit_testing::move_only_broken_swap<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 30:
	Broken move assignment Move assignment (from y)
	[sequoia::unit_testing::move_only_broken_move_assignment<int, std::__1::allocator<int> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 31:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 32:
	Broken check invariant Precondition - for checking regular semantics, x and xClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 33:
	Broken check invariant Precondition - for checking regular semantics, x and xClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	../UnitTests/UnitTestFramework/PerformanceTestDiagnostics.cpp, Line 30:
	Performance Test for which fast task is too slow, [1, (2.0, 2.0)
	Fast Task duration: 0.00139382s +- 4 * 3.94423e-06
	Slow Task duration: 0.00131348s +- 4 * 0.0001211 [0.942355; (2, 2)]

	../UnitTests/UnitTestFramework/PerformanceTestDiagnostics.cpp, Line 34:
	Performance Test for which fast task is too slow [1, (2.0, 3.0)
	Fast Task duration: 0.00132187s +- 4 * 5.23824e-05
	Slow Task duration: 0.00134817s +- 4 * 5.95065e-05 [1.0199; (2, 3)]

	../UnitTests/UnitTestFramework/PerformanceTestDiagnostics.cpp, Line 38:
	Performance Test for which fast task is too fast [4, (2.0, 2.5)]
	Fast Task duration: 0.00136056s +- 4 * 6.40911e-05
	Slow Task duration: 0.00472784s +- 4 * 0.000438185 [3.47493; (2, 2.5)]

	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 29
	[double]
	Obtained : 3
	Predicted: 5 +/- 1

	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 30
	[double]
	Obtained : 7
	Predicted: 5 +/- 1

	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 32
	[double]
	Fuzzy comparison failed
	Obtained : 1
	Predicted: 2


	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 40
	element 0

	[double]
	Obtained : 0.5
	Predicted: -0.1 +/- 0.5

	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 43
	element 1

	[double]
	Obtained : 0.6
	Predicted: 1.2 +/- 0.5

	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 48
	element 1

	[double]
	Obtained : -1
	Predicted: -1.8 +/- 0.5

	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 51
	element 1

	element 0

	[double]
	Obtained : 5.1
	Predicted: 3.7 +/- 0.5

	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 53:
	Broken equality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 61:
	Broken inequality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator== no allocation for operator==
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator!= no allocation for operator!=
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Copy constructor (x)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Equality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Move assignment (from y)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Copy-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Move-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move constructor
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move-like construction
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc Move-like construction
	[sequoia::unit_testing::broken_move_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 110:
	Inefficient move
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment (from y)
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Inequality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Move constructor
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment Move assignment (from y)
	[sequoia::unit_testing::broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy constrution/broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 171
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 172
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 187
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 196:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 205:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 240:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 53:
	Broken equality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 61:
	Broken inequality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator== no allocation for operator==
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator!= no allocation for operator!=
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Copy constructor (x)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Equality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Move assignment (from y)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Swap
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Swap
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Copy-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Move-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move constructor
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move-like construction
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc Move-like construction
	[sequoia::unit_testing::broken_move_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 110:
	Inefficient move
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment (from y)
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Inequality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Move constructor
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment Move assignment (from y)
	[sequoia::unit_testing::broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy constrution/broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 171
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 172
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 187
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 196:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 205:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, false, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 240:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 53:
	Broken equality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 61:
	Broken inequality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator== no allocation for operator==
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator!= no allocation for operator!=
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Copy constructor (x)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Equality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Move assignment (from y)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Copy-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Move-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move constructor
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move-like construction
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc Move-like construction
	[sequoia::unit_testing::broken_move_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 110:
	Inefficient move
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment (from y)
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Inequality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Move constructor
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment Move assignment (from y)
	[sequoia::unit_testing::broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy constrution/broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 171
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 172
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 187
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 196:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 205:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 240:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 53:
	Broken equality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 61:
	Broken inequality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator== no allocation for operator==
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator!= no allocation for operator!=
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Copy constructor (x)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Equality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Move assignment (from y)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Swap
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Swap
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Copy-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Move-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move constructor
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move-like construction
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc Move-like construction
	[sequoia::unit_testing::broken_move_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 110:
	Inefficient move
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment (from y)
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Inequality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Move constructor
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment Move assignment (from y)
	[sequoia::unit_testing::broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy constrution/broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 171
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 172
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 187
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 196:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 205:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<int, false, true, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 240:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 53:
	Broken equality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 61:
	Broken inequality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator== no allocation for operator==
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator!= no allocation for operator!=
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Copy constructor (x)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Equality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Move assignment (from y)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Copy-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Move-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move constructor
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move-like construction
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc Move-like construction
	[sequoia::unit_testing::broken_move_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 110:
	Inefficient move
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment (from y)
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Inequality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Move constructor
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment Move assignment (from y)
	[sequoia::unit_testing::broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy constrution/broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 171
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 172
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 187
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 196:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 205:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 240:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 53:
	Broken equality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 61:
	Broken inequality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator== no allocation for operator==
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator!= no allocation for operator!=
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Copy constructor (x)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Equality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Move assignment (from y)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Swap
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Swap
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Copy-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Move-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move constructor
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move-like construction
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc Move-like construction
	[sequoia::unit_testing::broken_move_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 110:
	Inefficient move
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment (from y)
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Inequality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Move constructor
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment Move assignment (from y)
	[sequoia::unit_testing::broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy constrution/broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 171
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 172
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 187
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 196:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 205:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 240:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 53:
	Broken equality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 61:
	Broken inequality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator== no allocation for operator==
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator!= no allocation for operator!=
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Copy constructor (x)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Equality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Move assignment (from y)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Copy-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Move-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move constructor
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move-like construction
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc Move-like construction
	[sequoia::unit_testing::broken_move_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 110:
	Inefficient move
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment (from y)
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Inequality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Move constructor
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment Move assignment (from y)
	[sequoia::unit_testing::broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy constrution/broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 171
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 172
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 187
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 196:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 205:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 240:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 53:
	Broken equality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 61:
	Broken inequality Equality operator is inconsistent
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator== no allocation for operator==
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality no allocation for operator!= no allocation for operator!=
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]

	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 3
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 69:
	Broken equality mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Copy constructor (x)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Equality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Move assignment (from y)
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Swap
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 1 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Swap
	[sequoia::unit_testing::broken_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 78:
	Broken copy Mutation after swap pre-condition violated
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Copy-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc Move-like construction
	[sequoia::unit_testing::broken_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 86:
	Broken copy alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move constructor
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : -3
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move Move-like construction
	[sequoia::unit_testing::broken_move<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 94:
	Broken move
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc Move-like construction
	[sequoia::unit_testing::broken_move_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 102:
	Broken move alloc
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 110:
	Inefficient move
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment (from y)
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Inequality operator
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Move constructor
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 118:
	Broken copy assignment Copy assignment
	[sequoia::unit_testing::broken_copy_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 5 6 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment Move assignment (from y)
	[sequoia::unit_testing::broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 5 6 


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 126:
	Broken move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : -1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy then swap
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy constrution/broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 141:
	Broken copy value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following copy assignment/ broken value semantics
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 156:
	Broken copy assignment value semantics Mutation is not doing anything following move allocation assignment
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 171
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 172
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 187
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 2
	Predicted: 3


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 196:
	Broken check invariant Precondition - for checking regular semantics, x and y are assumed to be different
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 205:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 209:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 219:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 223:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 240:
	Incorrect copy x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true>]
	Copy construction allocation (x)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true>]
	Copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true>]
	Para copy construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 244:
	Incorrect copy y allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true>]
	Copy assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 254:
	Incorrect copy assign y to x allocs
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true>]
	Copy assignment y allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after swap
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true>]
	y allocations
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 258:
	Incorrect mutation allocs mutation after move allocation assignment
	[sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true>]
	Mutation allocation after move-like construction
	[int]
	operator== returned false
	Obtained : 0
	Predicted: 1


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 59
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72 Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84 Move assignment (from y)
	[sequoia::unit_testing::move_only_broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 59
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72 Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84 Move assignment (from y)
	[sequoia::unit_testing::move_only_broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98 Swap
	[sequoia::unit_testing::move_only_broken_swap<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98 Swap
	[sequoia::unit_testing::move_only_broken_swap<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98 Move assignment (from y)
	[sequoia::unit_testing::move_only_broken_swap<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122
	[sequoia::unit_testing::shared_counting_allocator<int, true, false, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72 Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84 Move assignment (from y)
	[sequoia::unit_testing::move_only_broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, false>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 51
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 54
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Para move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 72 Precondition - for checking regular semantics, y and yClone are assumed to be equal
	[bool]
	operator== returned false
	Obtained : false
	Predicted: true


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 84 Move assignment (from y)
	[sequoia::unit_testing::move_only_broken_move_assignment<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98 Swap
	[sequoia::unit_testing::move_only_broken_swap<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 2 
	Predicted: 1 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98 Swap
	[sequoia::unit_testing::move_only_broken_swap<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 98 Move assignment (from y)
	[sequoia::unit_testing::move_only_broken_swap<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]
	operator== returned false
	Obtained : 1 
	Predicted: 2 


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 110
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Move construction allocation (y)
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 122
	[sequoia::unit_testing::shared_counting_allocator<int, true, true, true>]
	Move assignment x allocations
	[int]
	operator== returned false
	Obtained : 1
	Predicted: 0


	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 151
	[bool]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 153
	[int]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 154
	[double]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 156
	[std::__1::pair<int, double>]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 158
	[std::__1::tuple<int, double, float>]

	False Positive Failure:
		../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 160
	Expected Exception Type:
	[std::runtime_error]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 165:
	Empty vector check which should pass
	[std::__1::vector<double, std::__1::allocator<double> >]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 166:
	One element vector check which should pass
	[std::__1::vector<double, std::__1::allocator<double> >]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 167:
	Multi-element vector comparison which should pass
	[std::__1::vector<double, std::__1::allocator<double> >]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 171:
	Iterators demarcate identical elements
	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 173:
	Differing strings
	[std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 186
	[std::__1::tuple<std::__1::vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > >, std::__1::set<double, std::__1::less<double>, std::__1::allocator<double> >, std::__1::complex<double> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 191
	[sequoia::unit_testing::perfectly_normal_beast<int, std::__1::allocator<int> >]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 196
	Comparison performed using:
	[sequoia::unit_testing::equivalence_checker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >]
	With equivalent types:
	[char [4]]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 198
	[std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 204
	Comparison performed using:
	[sequoia::unit_testing::weak_equivalence_checker<sequoia::unit_testing::perfectly_normal_beast<int, std::__1::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]

	False Positive Failure:
	../UnitTests/UnitTestFramework/UnitTestDiagnostics.cpp, Line 207
	[std::__1::vector<sequoia::unit_testing::perfectly_normal_beast<int, std::__1::allocator<int> >, std::__1::allocator<sequoia::unit_testing::perfectly_normal_beast<int, std::__1::allocator<int> > > >]

	False Positive Failure:
	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyTestDiagnostics.cpp, Line 50
	[sequoia::unit_testing::move_only_beast<int, std::__1::allocator<int> >]

	False Positive Failure:
		../UnitTests/UnitTestFramework/PerformanceTestDiagnostics.cpp, Line 67:
	Performance Test which should pass
	Fast Task duration: 0.00123522s +- 4 * 8.83356e-05
	Slow Task duration: 0.00221963s +- 4 * 0.000217052 [1.79695; (1.8, 2.1)]

	False Positive Failure:
		../UnitTests/UnitTestFramework/PerformanceTestDiagnostics.cpp, Line 68:
	Performance Test which should pass
	Fast Task duration: 0.00118853s +- 4 * 0.000136023
	Slow Task duration: 0.00414911s +- 4 * 9.85872e-05 [3.49095; (3.6, 4.1)]

	False Positive Failure:
	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 69
	[double]

	False Positive Failure:
	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 70
	[double]

	False Positive Failure:
	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 72
	[double]

	False Positive Failure:
	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 73
	[double]

	False Positive Failure:
	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 79
	False Positive Failure:
	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 84
	[std::__1::vector<double, std::__1::allocator<double> >]

	False Positive Failure:
	../UnitTests/UnitTestFramework/FuzzyTestDiagnostics.cpp, Line 87
	[std::__1::vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 300
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 302
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 317
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 319
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 334
	[sequoia::unit_testing::inefficient_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 349
	[sequoia::unit_testing::inefficient_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 371
	[sequoia::unit_testing::doubly_normal_beast<int, double, sequoia::unit_testing::shared_counting_allocator<int, false, false, false>, sequoia::unit_testing::shared_counting_allocator<double, false, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 300
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 302
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 317
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 319
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 334
	[sequoia::unit_testing::inefficient_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 349
	[sequoia::unit_testing::inefficient_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 371
	[sequoia::unit_testing::doubly_normal_beast<int, double, sequoia::unit_testing::shared_counting_allocator<int, false, false, true>, sequoia::unit_testing::shared_counting_allocator<double, false, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 300
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 302
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 317
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 319
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 334
	[sequoia::unit_testing::inefficient_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 349
	[sequoia::unit_testing::inefficient_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 371
	[sequoia::unit_testing::doubly_normal_beast<int, double, sequoia::unit_testing::shared_counting_allocator<int, false, true, false>, sequoia::unit_testing::shared_counting_allocator<double, false, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 300
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 302
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 317
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 319
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 334
	[sequoia::unit_testing::inefficient_copy<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 349
	[sequoia::unit_testing::inefficient_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 371
	[sequoia::unit_testing::doubly_normal_beast<int, double, sequoia::unit_testing::shared_counting_allocator<int, false, true, true>, sequoia::unit_testing::shared_counting_allocator<double, false, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 300
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 302
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 317
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 319
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 334
	[sequoia::unit_testing::inefficient_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 349
	[sequoia::unit_testing::inefficient_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 371
	[sequoia::unit_testing::doubly_normal_beast<int, double, sequoia::unit_testing::shared_counting_allocator<int, true, false, false>, sequoia::unit_testing::shared_counting_allocator<double, true, false, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 300
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 302
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 317
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 319
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 334
	[sequoia::unit_testing::inefficient_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 349
	[sequoia::unit_testing::inefficient_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 371
	[sequoia::unit_testing::doubly_normal_beast<int, double, sequoia::unit_testing::shared_counting_allocator<int, true, false, true>, sequoia::unit_testing::shared_counting_allocator<double, true, false, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 300
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 302
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 317
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 319
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 334
	[sequoia::unit_testing::inefficient_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 349
	[sequoia::unit_testing::inefficient_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 371
	[sequoia::unit_testing::doubly_normal_beast<int, double, sequoia::unit_testing::shared_counting_allocator<int, true, true, false>, sequoia::unit_testing::shared_counting_allocator<double, true, true, false> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 300
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 302
	[sequoia::unit_testing::perfectly_normal_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 317
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 319
	[sequoia::unit_testing::perfectly_sharing_beast<int, std::__1::shared_ptr<int>, sequoia::unit_testing::shared_counting_allocator<std::__1::shared_ptr<int>, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 334
	[sequoia::unit_testing::inefficient_copy<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 349
	[sequoia::unit_testing::inefficient_copy_alloc<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]

	False Positive Failure:
	Regular Semantics ../UnitTests/UnitTestFramework/AllocationTestDiagnostics.cpp, Line 371
	[sequoia::unit_testing::doubly_normal_beast<int, double, sequoia::unit_testing::shared_counting_allocator<int, true, true, true>, sequoia::unit_testing::shared_counting_allocator<double, true, true, true> >]

	False Positive Failure:
	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162
	[sequoia::unit_testing::move_only_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165
	[sequoia::unit_testing::move_only_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, false> >]

	False Positive Failure:
	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162
	[sequoia::unit_testing::move_only_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165
	[sequoia::unit_testing::move_only_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, false, true> >]

	False Positive Failure:
	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162
	[sequoia::unit_testing::move_only_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165
	[sequoia::unit_testing::move_only_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, false> >]

	False Positive Failure:
	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 162
	[sequoia::unit_testing::move_only_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]

	False Positive Failure:
	Move-only Semantics ../UnitTests/UnitTestFramework/MoveOnlyAllocationTestDiagnostics.cpp, Line 165
	[sequoia::unit_testing::move_only_beast<int, sequoia::unit_testing::shared_counting_allocator<int, true, true, true> >]

