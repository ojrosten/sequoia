Tests/TestFramework/RegularTestDiagnostics.cpp, Line 28
Broken check invariant

--Regular Semantics--
[sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >]

  Prerequisite - for checking semantics, x and y are assumed to be different
  [bool]
  operator== returned false
  Obtained : false
  Predicted: true

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 29
Broken equality

--Regular Semantics--
[sequoia::testing::broken_equality<int, std::allocator<int> >]

  operator== is inconsistent (x)
  [bool]
  operator== returned false
  Obtained : false
  Predicted: true

  operator== is inconsistent (y)
  [bool]
  operator== returned false
  Obtained : false
  Predicted: true

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 30
Broken inequality

--Regular Semantics--
[sequoia::testing::broken_inequality<int, std::allocator<int> >]

  operator!= is inconsistent (x)
  [bool]
  operator== returned false
  Obtained : false
  Predicted: true

  operator!= is inconsistent (y)
  [bool]
  operator== returned false
  Obtained : false
  Predicted: true

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 31
Broken copy

--Regular Semantics--
[sequoia::testing::broken_copy<int, std::allocator<int> >]

  Inconsistent copy constructor (x)
  [sequoia::testing::broken_copy<int, std::allocator<int> >]
  operator== returned false
  Obtained : 
  Predicted: 1 

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 32
Broken move

--Regular Semantics--
[sequoia::testing::broken_move<int, std::allocator<int> >]

  Inconsistent move construction
  [sequoia::testing::broken_move<int, std::allocator<int> >]
  operator== returned false
  Obtained : 
  Predicted: 2 

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 33
Broken copy assignment

--Regular Semantics--
[sequoia::testing::broken_copy_assignment<int, std::allocator<int> >]

  Inconsistent copy assignment (from y)
  [sequoia::testing::broken_copy_assignment<int, std::allocator<int> >]
  operator== returned false
  Obtained : 1 
  Predicted: 2 

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 34
Broken move assignment

--Regular Semantics--
[sequoia::testing::broken_move_assignment<int, std::allocator<int> >]

  Inconsistent move assignment (from y)
  [sequoia::testing::broken_move_assignment<int, std::allocator<int> >]
  operator== returned false
  Obtained : 1 
  Predicted: 2 

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 35
Broken self copy assignment

--Regular Semantics--
[sequoia::testing::broken_self_copy_assignment<int, std::allocator<int> >]

  Inconsistent self copy assignment
  [sequoia::testing::broken_self_copy_assignment<int, std::allocator<int> >]
  operator== returned false
  Obtained : 2 0 
  Predicted: 2 

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 36
Broken swap

--Regular Semantics--
[sequoia::testing::broken_swap<int, std::allocator<int> >]

  Inconsistent Swap (y)
  [sequoia::testing::broken_swap<int, std::allocator<int> >]
  operator== returned false
  Obtained : 2 
  Predicted: 1 

  Inconsistent Swap (x)
  [sequoia::testing::broken_swap<int, std::allocator<int> >]
  operator== returned false
  Obtained : 1 
  Predicted: 2 

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 37
Broken self swap

--Regular Semantics--
[sequoia::testing::broken_self_swap<int, std::allocator<int> >]

  Inconsistent Self Swap
  [sequoia::testing::broken_self_swap<int, std::allocator<int> >]
  operator== returned false
  Obtained : 1 0 
  Predicted: 1 

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 38
Broken copy value semantics

--Regular Semantics--
[sequoia::testing::broken_copy_value_semantics<int, std::shared_ptr<int>, std::allocator<std::shared_ptr<int> > >]

  Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
  [bool]
  operator== returned false
  Obtained : false
  Predicted: true

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 39
Broken copy assignment value semantics

--Regular Semantics--
[sequoia::testing::broken_copy_assignment_value_semantics<int, std::shared_ptr<int>, std::allocator<std::shared_ptr<int> > >]

  Either mutation is not doing anything following copy assignment or value semantics are broken, with mutation of an object also changing the object from which it was assigned
  [bool]
  operator== returned false
  Obtained : false
  Predicted: true

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 40
Broken serialization

--Regular Semantics--
[sequoia::testing::broken_serialization<int, std::allocator<int> >]

  Inconsistent (de)serialization
  [sequoia::testing::broken_serialization<int, std::allocator<int> >]
  operator== returned false
  Obtained : 
  Predicted: 

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 41
Broken deserialization

--Regular Semantics--
[sequoia::testing::broken_deserialization<int, std::allocator<int> >]

  Inconsistent (de)serialization
  [sequoia::testing::broken_deserialization<int, std::allocator<int> >]
  operator== returned false
  Obtained : 1 
  Predicted: 2 

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 45
Incorrect x value

--Regular Semantics--
[sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >]

  x not equivalent to xEquivalent
  Comparison performed using:
  [sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
  Checking for weak equivalence with:
  [std::initializer_list<int>]

    Element 0 of range incorrect
    [int]
    operator== returned false
    Obtained : 1
    Predicted: 2

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 46
Incorrect y value

--Regular Semantics--
[sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >]

  y not equivalent to yEquivalent
  Comparison performed using:
  [sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
  Checking for weak equivalence with:
  [std::initializer_list<int>]

    Element 0 of range incorrect
    [int]
    operator== returned false
    Obtained : 2
    Predicted: 3

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 47
Incorrect x value; mutator

--Regular Semantics--
[sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >]

  x not equivalent to xEquivalent
  Comparison performed using:
  [sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
  Checking for weak equivalence with:
  [std::initializer_list<int>]

    Element 0 of range incorrect
    [int]
    operator== returned false
    Obtained : 1
    Predicted: 2

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 48
Incorrect y value; mutator

--Regular Semantics--
[sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >]

  y not equivalent to yEquivalent
  Comparison performed using:
  [sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
  Checking for weak equivalence with:
  [std::initializer_list<int>]

    Element 0 of range incorrect
    [int]
    operator== returned false
    Obtained : 2
    Predicted: 3

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 54
Incorrect moved-from state post construction

--Regular Semantics--
[sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]

  Incorrect moved-from value after move construction
  Comparison performed using:
  [sequoia::testing::value_tester<sequoia::testing::specified_moved_from_beast<int, std::allocator<int> > >]
  Checking for equivalence with:
  [std::vector<int, std::allocator<int> >]

    Wrapped vector
    [std::vector<int, std::allocator<int> >]
    operator== returned false

      Container size wrong
      [unsigned long long]
      operator== returned false
      Obtained : 0
      Predicted: 1

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 55
Incorrect moved-from state post construction

--Regular Semantics--
[sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]

  Incorrect moved-from value after move construction
  [sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]
  operator== returned false
  Obtained : 
  Predicted: 1

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 57
Incorrect moved-from state post construction

--Regular Semantics--
[sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]

  Incorrect moved-from value after move construction
  Comparison performed using:
  [sequoia::testing::value_tester<sequoia::testing::specified_moved_from_beast<int, std::allocator<int> > >]
  Checking for equivalence with:
  [std::vector<int, std::allocator<int> >]

    Wrapped vector
    [std::vector<int, std::allocator<int> >]
    operator== returned false

      Container size wrong
      [unsigned long long]
      operator== returned false
      Obtained : 0
      Predicted: 1

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 58
Incorrect moved-from state post construction

--Regular Semantics--
[sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]

  Incorrect moved-from value after move construction
  [sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]
  operator== returned false
  Obtained : 
  Predicted: 1

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 60
Incorrect moved-from state post assignment

--Regular Semantics--
[sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]

  Incorrect moved-from value after move assignment
  Comparison performed using:
  [sequoia::testing::value_tester<sequoia::testing::specified_moved_from_beast<int, std::allocator<int> > >]
  Checking for equivalence with:
  [std::vector<int, std::allocator<int> >]

    Wrapped vector
    [std::vector<int, std::allocator<int> >]
    operator== returned false

      Container size wrong
      [unsigned long long]
      operator== returned false
      Obtained : 0
      Predicted: 1

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 61
Incorrect moved-from state post assignment

--Regular Semantics--
[sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]

  Incorrect moved-from value after move assignment
  [sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]
  operator== returned false
  Obtained : 
  Predicted: 2

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 63
Incorrect moved-from state post assignment

--Regular Semantics--
[sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]

  Incorrect moved-from value after move assignment
  Comparison performed using:
  [sequoia::testing::value_tester<sequoia::testing::specified_moved_from_beast<int, std::allocator<int> > >]
  Checking for equivalence with:
  [std::vector<int, std::allocator<int> >]

    Wrapped vector
    [std::vector<int, std::allocator<int> >]
    operator== returned false

      Container size wrong
      [unsigned long long]
      operator== returned false
      Obtained : 0
      Predicted: 1

=======================================

Tests/TestFramework/RegularTestDiagnostics.cpp, Line 64
Incorrect moved-from state post assignment

--Regular Semantics--
[sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]

  Incorrect moved-from value after move assignment
  [sequoia::testing::specified_moved_from_beast<int, std::allocator<int> >]
  operator== returned false
  Obtained : 
  Predicted: 2

=======================================

