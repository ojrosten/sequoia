False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 274
Empty vector check which should pass

[std::vector<double, std::allocator<double> >]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 275
One element vector check which should pass

[std::vector<double, std::allocator<double> >]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 276
Multi-element vector comparison which should pass

[std::vector<double, std::allocator<double> >]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 280
Iterators demarcate identical elements

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 283
Advice for range equivalence, where the containerized form is explicitly specialized

Comparison performed using:
[sequoia::testing::value_tester<std::vector<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> > >]
Checking for equivalence with:
[std::vector<int, std::allocator<int> >]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 289
Advice for range equivalence, where the containerized form is not explicitly specialized

[std::set<sequoia::testing::(anonymous namespace)::foo, std::less<sequoia::testing::(anonymous namespace)::foo>, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 295

Comparison performed using:
[sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
Checking for weak equivalence with:
[std::initializer_list<int>]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 298

[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 300
Advice for weak equivalence checking

Comparison performed using:
[sequoia::testing::value_tester<sequoia::testing::only_weakly_checkable>]
Checking for weak equivalence with:
[std::pair<int, double>]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 305

[std::pair<int, double>]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 307

[std::tuple<int, double, float>]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 312

[std::pair<int, double>]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 318

[std::pair<int, sequoia::testing::only_weakly_checkable>]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 324

[std::pair<int, sequoia::testing::only_equivalence_checkable>]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 325

[std::pair<int, sequoia::testing::only_equivalence_checkable>]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 339

[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]

=======================================

False Positive Failure:
Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 341

[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

=======================================

