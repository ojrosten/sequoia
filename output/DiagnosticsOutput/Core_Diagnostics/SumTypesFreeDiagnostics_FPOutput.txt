	Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 33
	std::variant holding different types but with the same value

	[std::variant<int, double>]
	operator== returned false

	  Variant Index
	  [unsigned long long]
	  operator== returned false
	  Obtained : 0
	  Predicted: 1

	=======================================

	Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 34
	std::variant holding the zeroth type, but with different values

	[std::variant<int, double>]
	operator== returned false

	  Variant Contents
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 2

	=======================================

	Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 35
	std::variant holding the first type, but with different values

	[std::variant<int, double>]
	operator== returned false

	  Variant Contents
	  [double]
	  operator== returned false
	  Obtained : -0.1
	  Predicted: 0

	=======================================

	Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 41
	Empty vs non-empty std::optional

	[std::optional<int>]
	operator== returned false

	  Has value
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 42
	Non-empty vs empty std::optional

	[std::optional<int>]
	operator== returned false

	  Has value
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 43
	Two std::optionals holdings different values

	[std::optional<int>]
	operator== returned false

	  Contents of optional
	  [int]
	  operator== returned false
	  Obtained : 2
	  Predicted: 0

	=======================================

	Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 48
	Empty std::any

	Comparison performed using:
	[sequoia::testing::value_tester<std::any>]
	Checking for equivalence with:
	[int]

	  Has value
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 49
	std::any holding the wrong type

	Comparison performed using:
	[sequoia::testing::value_tester<std::any>]
	Checking for equivalence with:
	[double]

	  std::any does not hold the expected type
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 50
	std::any holding the wrong value

	Comparison performed using:
	[sequoia::testing::value_tester<std::any>]
	Checking for equivalence with:
	[int]

	  Value held by std::any
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 2

	=======================================

