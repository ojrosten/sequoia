Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 36
std::variant holding different types but with the same value

[std::variant<int, double>]
operator== returned false

  Variant Index
  [unsigned long long]
  operator== returned false
  Obtained : 0
  Predicted: 1

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 37
std::variant holding the zeroth type, but with different values

[std::variant<int, double>]
operator== returned false

  Variant Contents
  [int]
  operator== returned false
  Obtained : 1
  Predicted: 2

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 38
std::variant holding the first type, but with different values

[std::variant<int, double>]
operator== returned false

  Variant Contents
  [double]
  operator== returned false
  Obtained : -0.1
  Predicted: 0

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 41
std::variant proffering advice for different values of the zeroth type

[std::variant<int, double>]
operator== returned false

  Variant Contents
  [int]
  operator== returned false
  Obtained : -1
  Predicted: 0
  Advice: int advice

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 47
std::variant proffering advice for different values of the first type

[std::variant<int, double>]
operator== returned false

  Variant Contents
  [double]
  operator== returned false
  Obtained : -0.1
  Predicted: 0
  Advice: double advice

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 53
std::variant advice ignored due to type mismatch

[std::variant<int, double>]
operator== returned false

  Variant Contents
  [double]
  operator== returned false
  Obtained : -1
  Predicted: 0

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 62

[std::variant<int, sequoia::testing::only_equivalence_checkable, sequoia::testing::only_weakly_checkable>]
  Variant Contents
  [int]
  operator== returned false
  Obtained : 1
  Predicted: 2

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 63

[std::variant<int, sequoia::testing::only_equivalence_checkable, sequoia::testing::only_weakly_checkable>]
  Variant Contents
  [sequoia::testing::only_equivalence_checkable]
    Wrapped double
    [double]
    operator== returned false
    Obtained : 41
    Predicted: 42

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 64

[std::variant<int, sequoia::testing::only_equivalence_checkable, sequoia::testing::only_weakly_checkable>]
  Variant Contents
  [sequoia::testing::only_weakly_checkable]
    Wrapped double
    [double]
    operator== returned false
    Obtained : 1.5
    Predicted: 2.5

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 66

[std::variant<int, sequoia::testing::only_equivalence_checkable, sequoia::testing::only_weakly_checkable>]
  Variant Contents
  [int]
  operator== returned false
  Obtained : 1
  Predicted: 2
  Advice: int advice

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 75
Empty vs non-empty std::optional

[std::optional<int>]
operator== returned false

  Obtained : null
  Predicted: not null
  [bool]
  check failed

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 76
Non-empty vs empty std::optional

[std::optional<int>]
operator== returned false

  Obtained : not null
  Predicted: null
  [bool]
  check failed

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 77
Two std::optionals holdings different values

[std::optional<int>]
operator== returned false

  Contents of optional
  [int]
  operator== returned false
  Obtained : 2
  Predicted: 0

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 80
Advice for two std::optionals holdings different values

[std::optional<int>]
operator== returned false

  Contents of optional
  [int]
  operator== returned false
  Obtained : 2
  Predicted: 0
  Advice: int advice

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 89
Empty vs non-empty std::optional

Comparison performed using:
[sequoia::testing::value_tester<std::optional<sequoia::testing::only_equivalence_checkable> >]
Checking for equivalence with:
[std::optional<sequoia::testing::only_equivalence_checkable>]

  Obtained : null
  Predicted: not null
  [bool]
  check failed

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 90
Non-empty vs empty std::optional

Comparison performed using:
[sequoia::testing::value_tester<std::optional<sequoia::testing::only_equivalence_checkable> >]
Checking for equivalence with:
[std::optional<sequoia::testing::only_equivalence_checkable>]

  Obtained : not null
  Predicted: null
  [bool]
  check failed

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 91
Two std::optionals holdings different values

Comparison performed using:
[sequoia::testing::value_tester<std::optional<sequoia::testing::only_equivalence_checkable> >]
Checking for equivalence with:
[std::optional<sequoia::testing::only_equivalence_checkable>]

  Contents of optional
  Comparison performed using:
  [sequoia::testing::value_tester<sequoia::testing::only_equivalence_checkable>]
  Checking for equivalence with:
  [sequoia::testing::only_equivalence_checkable]

    Wrapped double
    [double]
    operator== returned false
    Obtained : 2
    Predicted: 0

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 97
Empty vs non-empty std::optional

Comparison performed using:
[sequoia::testing::value_tester<std::optional<sequoia::testing::only_weakly_checkable> >]
Checking for weak equivalence with:
[std::optional<sequoia::testing::only_weakly_checkable>]

  Obtained : null
  Predicted: not null
  [bool]
  check failed

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 98
Non-empty vs empty std::optional

Comparison performed using:
[sequoia::testing::value_tester<std::optional<sequoia::testing::only_weakly_checkable> >]
Checking for weak equivalence with:
[std::optional<sequoia::testing::only_weakly_checkable>]

  Obtained : not null
  Predicted: null
  [bool]
  check failed

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 99
Two std::optionals holdings different values

Comparison performed using:
[sequoia::testing::value_tester<std::optional<sequoia::testing::only_weakly_checkable> >]
Checking for weak equivalence with:
[std::optional<sequoia::testing::only_weakly_checkable>]

  Contents of optional
  Comparison performed using:
  [sequoia::testing::value_tester<sequoia::testing::only_weakly_checkable>]
  Checking for weak equivalence with:
  [sequoia::testing::only_weakly_checkable]

    Wrapped int
    [int]
    operator== returned false
    Obtained : 2
    Predicted: 1

    Wrapped double
    [double]
    operator== returned false
    Obtained : 1
    Predicted: 2

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 105
Empty std::any

Comparison performed using:
[sequoia::testing::value_tester<std::any>]
Checking for equivalence with:
[int]

  Has value
  [bool]
  check failed

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 106
std::any holding the wrong type

Comparison performed using:
[sequoia::testing::value_tester<std::any>]
Checking for equivalence with:
[double]

  std::any does not hold the expected type
  [bool]
  check failed

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 107
std::any holding the wrong value

Comparison performed using:
[sequoia::testing::value_tester<std::any>]
Checking for equivalence with:
[int]

  Value held by std::any
  [int]
  operator== returned false
  Obtained : 1
  Predicted: 2

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 109

Comparison performed using:
[sequoia::testing::value_tester<std::any>]
Checking for equivalence with:
[sequoia::testing::only_equivalence_checkable]

  Value held by std::any
  [sequoia::testing::only_equivalence_checkable]
    Wrapped double
    [double]
    operator== returned false
    Obtained : 1
    Predicted: 2

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 110

Comparison performed using:
[sequoia::testing::value_tester<std::any>]
Checking for equivalence with:
[sequoia::testing::only_weakly_checkable]

  Value held by std::any
  [sequoia::testing::only_weakly_checkable]
    Wrapped int
    [int]
    operator== returned false
    Obtained : 1
    Predicted: 2

    Wrapped double
    [double]
    operator== returned false
    Obtained : 1
    Predicted: 2

=======================================

Tests/TestFramework/SumTypesFreeDiagnostics.cpp, Line 113
Advice for std::any holding the wrong value

Comparison performed using:
[sequoia::testing::value_tester<std::any>]
Checking for equivalence with:
[int]

  Value held by std::any
  [int]
  operator== returned false
  Obtained : 1
  Predicted: 2
  Advice: int advice

=======================================

