	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 81
	Empty vector check which should fail

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Container size wrong
	  [unsigned long long]
	  operator== returned false
	  Obtained : 0
	  Predicted: 1

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 82
	One element vector check which should fail due to wrong value

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Element 0 of range incorrect
	  [double]
	  operator== returned false
	  Obtained : 1
	  Predicted: 2

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 84
	Advice for one element vector check which should fail due to wrong value

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Element 0 of range incorrect
	  [double]
	  operator== returned false
	  Obtained : 1
	  Predicted: 2
	  Advice: Vector element advice

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 88
	One element vector check which should fail due to differing sizes

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Container size wrong
	  [unsigned long long]
	  operator== returned false
	  Obtained : 1
	  Predicted: 2

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 89
	Multi-element vector comparison which should fail due to last element

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Element 1 of range incorrect
	  [double]
	  operator== returned false
	  Obtained : 5
	  Predicted: 4

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 90
	Multi-element vector comparison which should fail due to first element

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Element 0 of range incorrect
	  [double]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 91
	Multi-element vector comparison which should fail due to middle element

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Element 1 of range incorrect
	  [double]
	  operator== returned false
	  Obtained : 3.2
	  Predicted: 3.3

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 92
	Multi-element vector comparison which should fail due to different sizes

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Container size wrong
	  [unsigned long long]
	  operator== returned false
	  Obtained : 3
	  Predicted: 2

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 96
	Iterators demarcate differing numbers of elements

	  Container size wrong
	  [unsigned long long]
	  operator== returned false
	  Obtained : 4
	  Predicted: 6

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 97
	Iterators demarcate differing elements

	  Element 0 of range incorrect
	  [float]
	  operator== returned false
	  Obtained : -4.3
	  Predicted: 1.1

	  Element 1 of range incorrect
	  [float]
	  operator== returned false
	  Obtained : 2.8
	  Predicted: -4.3

	  Element 2 of range incorrect
	  [float]
	  operator== returned false
	  Obtained : 6.2
	  Predicted: 2.8

	  Element 3 of range incorrect
	  [float]
	  operator== returned false
	  Obtained : 7.3
	  Predicted: 6.2

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 100
	Range equivalence, where the containerized form is explicitly specialized

	[std::vector<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	  Element 0 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	  Checking for equivalence with:
	  [int]

	    Wrapped value
	    [int]
	    operator== returned false
	    Obtained : 42
	    Predicted: 41

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 105
	Advice for range equivalence, where the containerized form is explicitly specialized

	Comparison performed using:
	[sequoia::testing::value_tester<std::vector<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> > >]
	Checking for equivalence with:
	[std::vector<int, std::allocator<int> >]

	  Vector equivalence

	    Element 0 of range incorrect
	    Comparison performed using:
	    [sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	    Checking for equivalence with:
	    [int]

	      Wrapped value
	      [int]
	      operator== returned false
	      Obtained : 42
	      Predicted: 41
	      Advice: Integer advice

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 111
	Range equivalence, where the containerized form is not explicitly specialized

	[std::set<sequoia::testing::(anonymous namespace)::foo, std::less<sequoia::testing::(anonymous namespace)::foo>, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	  Element 0 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	  Checking for equivalence with:
	  [int]

	    Wrapped value
	    [int]
	    operator== returned false
	    Obtained : 42
	    Predicted: 41

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 116
	Advice for range equivalence, where the containerized form is not explicitly specialized

	[std::set<sequoia::testing::(anonymous namespace)::foo, std::less<sequoia::testing::(anonymous namespace)::foo>, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	  Element 0 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	  Checking for equivalence with:
	  [int]

	    Wrapped value
	    [int]
	    operator== returned false
	    Obtained : 42
	    Predicted: 41
	    Advice: Integer advice

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 122
	Range weak equivalence, where the containerized form is explicitly specialized

	[std::vector<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	  Element 0 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	  Checking for weak equivalence with:
	  [int]

	    Wrapped value
	    [int]
	    operator== returned false
	    Obtained : 42
	    Predicted: 41

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 127
	Advice for range weak equivalence, where the containerized form is explicitly specialized

	Comparison performed using:
	[sequoia::testing::value_tester<std::vector<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> > >]
	Checking for weak equivalence with:
	[std::list<int, std::allocator<int> >]

	  Vector equivalence

	    Element 0 of range incorrect
	    Comparison performed using:
	    [sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	    Checking for equivalence with:
	    [int]

	      Wrapped value
	      [int]
	      operator== returned false
	      Obtained : 42
	      Predicted: 41
	      Advice: Integer advice

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 133
	Range weak equivalence, where the containerized form is not explicitly specialized

	[std::list<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	  Element 0 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	  Checking for weak equivalence with:
	  [double]

	    Wrapped value
	    [int]
	    operator== returned false
	    Obtained : 42
	    Predicted: 41

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 138
	Advice for range weak equivalence, where the containerized form is not explicitly specialized

	[std::list<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	  Element 0 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	  Checking for weak equivalence with:
	  [double]

	    Wrapped value
	    [int]
	    operator== returned false
	    Obtained : 42
	    Predicted: 41
	    Advice: Integer advice

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 145

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	Checking for weak equivalence with:
	[std::initializer_list<int>]

	  Element 1 of range incorrect
	  [int]
	  operator== returned false
	  Obtained : 2
	  Predicted: 1

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 146

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	Checking for weak equivalence with:
	[std::initializer_list<int>]

	  Element 1 of range incorrect
	  [int]
	  operator== returned false
	  Obtained : 2
	  Predicted: 1
	  Advice: Don't mess with the beast.

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 151

	[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	  Checking for weak equivalence with:
	  [std::initializer_list<int>]

	    Element 1 of range incorrect
	    [int]
	    operator== returned false
	    Obtained : 4
	    Predicted: 5

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 154

	[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	  Checking for weak equivalence with:
	  [std::initializer_list<int>]

	    Element 1 of range incorrect
	    [int]
	    operator== returned false
	    Obtained : 4
	    Predicted: 5
	    Advice: Or at least don't mess with a vector of beasts.

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 164

	[std::pair<int, double>]
	operator== returned false

	  Second element of pair is incorrect
	  [double]
	  operator== returned false
	  Obtained : 7.8
	  Predicted: -7.8

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 165

	[std::pair<int, double>]
	operator== returned false

	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 5
	  Predicted: -5

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 166

	[std::pair<int, double>]
	operator== returned false

	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 5
	  Predicted: -5
	  Advice: Integer advice

	  Second element of pair is incorrect
	  [double]
	  operator== returned false
	  Obtained : 7.8
	  Predicted: 6.8
	  Advice: Double advice

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 167

	[std::pair<int, double>]
	operator== returned false

	  Second element of pair is incorrect
	  [double]
	  operator== returned false
	  Obtained : 7.8
	  Predicted: -7.8

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 168

	Comparison performed using:
	[sequoia::testing::value_tester<std::pair<int const&, double> >]
	Checking for equivalence with:
	[std::pair<int, double const&>]

	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 5
	  Predicted: -5

	  Second element of pair is incorrect
	  [double]
	  operator== returned false
	  Obtained : 7.8
	  Predicted: 6.8

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 169

	Comparison performed using:
	[sequoia::testing::value_tester<std::pair<int const&, double> >]
	Checking for weak equivalence with:
	[std::pair<int, double const&>]

	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 5
	  Predicted: -5

	  Second element of pair is incorrect
	  [double]
	  operator== returned false
	  Obtained : 7.8
	  Predicted: 6.8

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 171

	[std::tuple<int, double, float>]
	operator== returned false

	  Element 0 of tuple incorrect
	  [int]
	  operator== returned false
	  Obtained : 4
	  Predicted: 0

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 172

	[std::tuple<int, double, float>]
	operator== returned false

	  Element 1 of tuple incorrect
	  [double]
	  operator== returned false
	  Obtained : 3.4
	  Predicted: 0
	  Advice: Double advice

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 173

	[std::tuple<int, double, float>]
	operator== returned false

	  Element 2 of tuple incorrect
	  [float]
	  operator== returned false
	  Obtained : -9.2
	  Predicted: -0

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 174

	Comparison performed using:
	[sequoia::testing::value_tester<std::tuple<int const&, double> >]
	Checking for equivalence with:
	[std::tuple<int, double const&>]

	  Element 0 of tuple incorrect
	  [int]
	  operator== returned false
	  Obtained : 5
	  Predicted: -5

	  Element 1 of tuple incorrect
	  [double]
	  operator== returned false
	  Obtained : 7.8
	  Predicted: 6.8

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 179

	[std::pair<int, double>]
	operator== returned false

	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 0
	  Predicted: 1

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 185

	[std::pair<int, sequoia::testing::only_weakly_checkable>]
	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 186

	[std::pair<int, sequoia::testing::only_weakly_checkable>]
	  Second element of pair is incorrect
	  [sequoia::testing::only_weakly_checkable]
	    Wrapped double
	    [double]
	    operator== returned false
	    Obtained : 2
	    Predicted: 2.1

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 187

	[std::pair<int, sequoia::testing::only_weakly_checkable>]
	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0

	  Second element of pair is incorrect
	  [sequoia::testing::only_weakly_checkable]
	    Wrapped double
	    [double]
	    operator== returned false
	    Obtained : 2
	    Predicted: 2.1

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 188

	[std::pair<int, sequoia::testing::only_weakly_checkable>]
	  Second element of pair is incorrect
	  [sequoia::testing::only_weakly_checkable]
	    Wrapped double
	    [double]
	    operator== returned false
	    Obtained : 2
	    Predicted: 2.1
	    Advice: Double advice

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 194

	[std::pair<int, sequoia::testing::only_equivalence_checkable>]
	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 195

	[std::pair<int, sequoia::testing::only_equivalence_checkable>]
	  Second element of pair is incorrect
	  [sequoia::testing::only_equivalence_checkable]
	    Wrapped double
	    [double]
	    operator== returned false
	    Obtained : 1.5
	    Predicted: 1.4

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 196

	[std::pair<int, sequoia::testing::only_equivalence_checkable>]
	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 0
	  Predicted: 1

	  Second element of pair is incorrect
	  [sequoia::testing::only_equivalence_checkable]
	    Wrapped double
	    [double]
	    operator== returned false
	    Obtained : 1.5
	    Predicted: 1.4

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 197

	[std::pair<int, sequoia::testing::only_equivalence_checkable>]
	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0
	  Advice: Integer advice

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 212

	[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]
	operator== returned false

	  Element 0 of tuple incorrect
	  [std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >]
	  operator== returned false

	    Element 0 of range incorrect
	    [std::pair<int, float>]
	    operator== returned false

	      First element of pair is incorrect
	      [int]
	      operator== returned false
	      Obtained : 1
	      Predicted: 2
	      Advice: Nested int advice

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 217

	[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]
	operator== returned false

	  Element 1 of tuple incorrect
	  [std::set<double, std::less<double>, std::allocator<double> >]
	  operator== returned false
	  Advice: Note reordering of elements upon set construction

	    Element 2 of range incorrect
	    [double]
	    operator== returned false
	    Obtained : 3.3
	    Predicted: 3.4

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 222

	[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	  Checking for equivalence with:
	  [std::basic_string_view<char, std::char_traits<char> >]

	    First difference detected at character 0:
	    [char]
	    operator== returned false
	    Obtained : b
	    Predicted: c

	    Full strings:
	    Obtained : b
	    Predicted: c

	=======================================

	Tests/TestFramework/ContainerFreeDiagnostics.cpp, Line 224

	[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	  Checking for equivalence with:
	  [std::basic_string_view<char, std::char_traits<char> >]

	    First difference detected at character 0:
	    [char]
	    operator== returned false
	    Obtained : b
	    Predicted: c

	    Full strings:
	    Obtained : b
	    Predicted: c
	    Advice: Ah, chars. So easy to get wrong.

	=======================================

