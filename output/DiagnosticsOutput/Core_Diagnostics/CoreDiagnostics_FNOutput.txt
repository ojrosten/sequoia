	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 498

	[bool]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 500

	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 501

	[double]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 506

	Expected Exception Type:
	[std::runtime_error]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 508

	Expected Exception Type:
	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 513

	[std::pair<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 515

	[std::tuple<int, double, float>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 522

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 523

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 524

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 525

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 531

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 532

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 533

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 538
	Empty vector check which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 539
	One element vector check which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 540
	Multi-element vector comparison which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 544
	Iterators demarcate identical elements

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 550
	Differing strings

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 551

	Comparison performed using:
	[sequoia::testing::value_tester<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	Checking for equivalence with:
	[char [4]]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 564

	[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 566

	[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 572
	Equivalence of a file to itself

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 577
	Equivalence of a directory to itself

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 582
	Equivalence of a directory, with sub-directories to itself

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 587
	Equivalence of identical directories in different locations

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 592
	File equivalence when .ignore is ignored

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 597
	Range equivalence when .ignore is ignored

	[std::vector<std::filesystem::path, std::allocator<std::filesystem::path> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 604
	Advice for equivalence checking

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	Checking for equivalence with:
	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 606
	Advice for range equivalence, where the containerized for is explicitly specialized

	Comparison performed using:
	[sequoia::testing::value_tester<std::vector<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> > >]
	Checking for equivalence with:
	[std::vector<int, std::allocator<int> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 609
	Advice for range equivalence, where the containerized for is not explicitly specialized

	[std::set<sequoia::testing::(anonymous namespace)::foo, std::less<sequoia::testing::(anonymous namespace)::foo>, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 614
	string and string_view

	Comparison performed using:
	[sequoia::testing::value_tester<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	Checking for equivalence with:
	[std::basic_string_view<char, std::char_traits<char> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 620

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	Checking for weak equivalence with:
	[std::initializer_list<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 623

	[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 625
	Weak equivalence of directories in with the same contents but different names

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for weak equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 630
	Weak equivalence when .ignore is ignored

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for weak equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 635
	Weak equivalence of range when .ignore is ignored

	[std::vector<std::filesystem::path, std::allocator<std::filesystem::path> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 639
	Advice for weak equivalence checking

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::only_weakly_checkable>]
	Checking for weak equivalence with:
	[std::pair<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 642
	Advice for range weak equivalence, where the containerized form is explicitly specialized

	[std::vector<sequoia::testing::(anonymous namespace)::only_weakly_checkable, std::allocator<sequoia::testing::(anonymous namespace)::only_weakly_checkable> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 646
	Advice for range weak equivalence, where the containerized form is not explicitly specialized

	[std::list<sequoia::testing::(anonymous namespace)::only_weakly_checkable, std::allocator<sequoia::testing::(anonymous namespace)::only_weakly_checkable> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 655

	[std::pair<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 661

	[std::pair<int, sequoia::testing::(anonymous namespace)::only_weakly_checkable>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 667

	[std::pair<int, sequoia::testing::(anonymous namespace)::only_equivalence_checkable>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 668

	[std::pair<int, sequoia::testing::(anonymous namespace)::only_equivalence_checkable>]

	=======================================

