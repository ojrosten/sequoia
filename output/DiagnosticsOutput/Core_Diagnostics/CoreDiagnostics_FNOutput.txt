	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 430

	[bool]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 432

	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 433

	[double]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 438

	Expected Exception Type:
	[std::runtime_error]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 440

	Expected Exception Type:
	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 445

	[std::pair<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 447

	[std::tuple<int, double, float>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 454

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 455

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 456

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 457

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 463

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 464

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 465

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 470
	Empty vector check which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 471
	One element vector check which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 472
	Multi-element vector comparison which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 476
	Iterators demarcate identical elements

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 482
	Differing strings

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 495

	[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 500

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 501

	--Regular Semantics--
	[sequoia::testing::perfectly_stringy_beast<char, std::allocator<char> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 506

	Comparison performed using:
	[sequoia::testing::value_tester<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	With equivalent types:
	[char [4]]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 508

	[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 510
	Equivalence of a file to itself

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 514
	Equivalence of a directory to itself

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 518
	Equivalence of a directory, with sub-directories to itself

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 522
	Equivalence of identical directories in different locations

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 526
	File equivalence when .ignore is ignored

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 531
	Range equivalence when .ignore is ignored

	[std::vector<std::filesystem::path, std::allocator<std::filesystem::path> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 536
	Advice for equivalence checking

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	With equivalent types:
	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 538
	Advice for range equivalence, where the containerized for is explicitly specialized

	Comparison performed using:
	[sequoia::testing::value_tester<std::vector<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> > >]
	With equivalent types:
	[std::vector<int, std::allocator<int> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 541
	Advice for range equivalence, where the containerized for is not explicitly specialized

	[std::set<sequoia::testing::(anonymous namespace)::foo, std::less<sequoia::testing::(anonymous namespace)::foo>, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 548

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 551

	[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 553
	Weak equivalence of directories in with the same contents but different names

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 557
	Weak equivalence when .ignore is ignored

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 562
	Weak equivalence of range when .ignore is ignored

	[std::vector<std::filesystem::path, std::allocator<std::filesystem::path> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 567
	Advice for weak equivalence checking

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::bar>]
	With equivalent types:
	[std::pair<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 570
	Advice for range weak equivalence, where the containerized form is explicitly specialized

	[std::vector<sequoia::testing::(anonymous namespace)::bar, std::allocator<sequoia::testing::(anonymous namespace)::bar> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 574
	Advice for range weak equivalence, where the containerized form is not explicitly specialized

	[std::list<sequoia::testing::(anonymous namespace)::bar, std::allocator<sequoia::testing::(anonymous namespace)::bar> >]

	=======================================

