	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 492

	[bool]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 494

	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 495

	[double]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 500

	Expected Exception Type:
	[std::runtime_error]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 502

	Expected Exception Type:
	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 507

	[std::pair<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 509

	[std::tuple<int, double, float>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 516

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 517

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 518

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 519

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 525

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 526

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 527

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 532
	Empty vector check which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 533
	One element vector check which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 534
	Multi-element vector comparison which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 538
	Iterators demarcate identical elements

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 544
	Differing strings

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 545

	Comparison performed using:
	[sequoia::testing::value_tester<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	Checking for equivalence with:
	[char [4]]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 558

	[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 560

	[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 566
	Equivalence of a file to itself

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 571
	Equivalence of a directory to itself

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 576
	Equivalence of a directory, with sub-directories to itself

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 581
	Equivalence of identical directories in different locations

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 586
	File equivalence when .ignore is ignored

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 591
	Range equivalence when .ignore is ignored

	[std::vector<std::filesystem::path, std::allocator<std::filesystem::path> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 600
	Both bound

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<void ()> >]
	Checking for weak equivalence with:
	[std::function<void ()>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 601
	Neither bound

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<void ()> >]
	Checking for weak equivalence with:
	[std::function<void ()>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 606
	Both bound

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<int ()> >]
	Checking for weak equivalence with:
	[std::function<int ()>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 607
	Neither bound

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<int ()> >]
	Checking for weak equivalence with:
	[std::function<int ()>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 612
	Both bound

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<void (int)> >]
	Checking for weak equivalence with:
	[std::function<void (int)>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 613
	Neither bound

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<void (int)> >]
	Checking for weak equivalence with:
	[std::function<void (int)>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 619
	Advice for equivalence checking

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	Checking for equivalence with:
	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 621
	Advice for range equivalence, where the containerized for is explicitly specialized

	Comparison performed using:
	[sequoia::testing::value_tester<std::vector<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> > >]
	Checking for equivalence with:
	[std::vector<int, std::allocator<int> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 624
	Advice for range equivalence, where the containerized for is not explicitly specialized

	[std::set<sequoia::testing::(anonymous namespace)::foo, std::less<sequoia::testing::(anonymous namespace)::foo>, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 629
	string and string_view

	Comparison performed using:
	[sequoia::testing::value_tester<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	Checking for equivalence with:
	[std::basic_string_view<char, std::char_traits<char> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 635

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	Checking for weak equivalence with:
	[std::initializer_list<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 638

	[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 641
	Weak equivalence of directories in with the same contents but different names

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for weak equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 646
	Weak equivalence when .ignore is ignored

	Comparison performed using:
	[sequoia::testing::value_tester<std::filesystem::path>]
	Checking for weak equivalence with:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 651
	Weak equivalence of range when .ignore is ignored

	[std::vector<std::filesystem::path, std::allocator<std::filesystem::path> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 655
	Advice for weak equivalence checking

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::only_weakly_checkable>]
	Checking for weak equivalence with:
	[std::pair<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 658
	Advice for range weak equivalence, where the containerized form is explicitly specialized

	[std::vector<sequoia::testing::only_weakly_checkable, std::allocator<sequoia::testing::only_weakly_checkable> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 662
	Advice for range weak equivalence, where the containerized form is not explicitly specialized

	[std::list<sequoia::testing::only_weakly_checkable, std::allocator<sequoia::testing::only_weakly_checkable> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 671

	[std::pair<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 677

	[std::pair<int, sequoia::testing::only_weakly_checkable>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 683

	[std::pair<int, sequoia::testing::only_equivalence_checkable>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 684

	[std::pair<int, sequoia::testing::only_equivalence_checkable>]

	=======================================

