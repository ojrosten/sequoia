	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 409

	[bool]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 411

	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 412

	[double]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 417

	Expected Exception Type:
	[std::runtime_error]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 419

	Expected Exception Type:
	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 424

	[std::pair<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 426

	[std::tuple<int, double, float>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 433

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 434

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 435

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 436

	[std::variant<int, double>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 442

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 443

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 444

	[std::optional<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 449
	Empty vector check which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 450
	One element vector check which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 451
	Multi-element vector comparison which should pass

	[std::vector<double, std::allocator<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 455
	Iterators demarcate identical elements

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 461
	Differing strings

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 474

	[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 479

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 480

	--Regular Semantics--
	[sequoia::testing::perfectly_stringy_beast<char, std::allocator<char> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 485

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	With equivalent types:
	[char [4]]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 487

	[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 489
	Equivalence of a file to itself

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 493
	Equivalence of a directory to itself

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 497
	Equivalence of a directory, with sub-directories to itself

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 501
	Equivalence of identical directories in different locations

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 505
	File equivalence when .ignore is ignored

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 510
	Range equivalence when .ignore is ignored

	[std::vector<std::filesystem::path, std::allocator<std::filesystem::path> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 515
	Advice for equivalence checking

	Comparison performed using:
	[sequoia::testing::equivalence_checker<sequoia::testing::(anonymous namespace)::foo>]
	With equivalent types:
	[int]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 517
	Advice for range equivalence, where the containorized for is explicitly specialized

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::vector<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> > >]
	With equivalent types:
	[std::vector<int, std::allocator<int> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 520
	Advice for range equivalence, where the containorized for is not explicitly specialized

	[std::set<sequoia::testing::(anonymous namespace)::foo, std::less<sequoia::testing::(anonymous namespace)::foo>, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 527

	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 530

	[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 532
	Weak equivalence of directories in with the same contents but different names

	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 536
	Weak equivalence when .ignore is ignored

	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	=======================================

	False Positive Failure:
	Tests/TestFramework/CoreDiagnostics.cpp, Line 541
	Weak equivalence of range when .ignore is ignored

	[std::vector<std::filesystem::path, std::allocator<std::filesystem::path> >]

	=======================================

