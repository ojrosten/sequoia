	Tests/TestFramework/CoreDiagnostics.cpp, Line 95

	[bool]
	check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 96

	[bool]
	check failed
	Advice: I pity the fool who confuses the bool.

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 99
	Advisor ignored

	[bool]
	check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 103
	Integers which should compare different

	[int]
	operator== returned false
	Obtained : 5
	Predicted: 4

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 104

	[double]
	operator== returned false
	Obtained : 6.5
	Predicted: 5.6
	Advice: Double, double, toil and trouble

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 111
	Exception expected but nothing thrown

	Expected Exception Type:
	[std::runtime_error]
	No exception thrown

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 112
	Exception thrown but of wrong type

	Expected Exception Type:
	[std::runtime_error]
	Unexpected exception thrown (caught by std::exception&):
	"Error"

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 113
	Exception thrown but of unknown type

	Expected Exception Type:
	[std::runtime_error]
	Unknown exception thrown

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 127

	[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]
	operator== returned false

	  Element 0 of tuple incorrect
	  [std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >]
	  operator== returned false

	    Element 0 of range incorrect
	    [std::pair<int, float>]
	    operator== returned false

	      First element of pair is incorrect
	      [int]
	      operator== returned false
	      Obtained : 1
	      Predicted: 2
	      Advice: Nested int advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 132

	[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]
	operator== returned false

	  Element 1 of tuple incorrect
	  [std::set<double, std::less<double>, std::allocator<double> >]
	  operator== returned false
	  Advice: Note reordering of elements upon set construction

	    Element 2 of range incorrect
	    [double]
	    operator== returned false
	    Obtained : 3.3
	    Predicted: 3.4

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 137

	[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	  Checking for equivalence with:
	  [std::basic_string_view<char, std::char_traits<char> >]

	    First difference detected at character 0:
	    [char]
	    operator== returned false
	    Obtained : b
	    Predicted: c

	    Full strings:
	    Obtained : b
	    Predicted: c

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 139

	[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	  Checking for equivalence with:
	  [std::basic_string_view<char, std::char_traits<char> >]

	    First difference detected at character 0:
	    [char]
	    operator== returned false
	    Obtained : b
	    Predicted: c

	    Full strings:
	    Obtained : b
	    Predicted: c
	    Advice: Ah, chars. So easy to get wrong.

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 149
	Obtained bound but prediction not

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<void ()> >]
	Checking for weak equivalence with:
	[std::function<void ()>]

	  obtained has a function bound but prediction has a function not bound
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 154
	Prediction bound but obtained not

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<void ()> >]
	Checking for weak equivalence with:
	[std::function<void ()>]

	  obtained has a function not bound but prediction has a function bound
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 162
	Obtained bound but prediction not

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<int ()> >]
	Checking for weak equivalence with:
	[std::function<int ()>]

	  obtained has a function bound but prediction has a function not bound
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 167
	Prediction bound but obtained not

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<int ()> >]
	Checking for weak equivalence with:
	[std::function<int ()>]

	  obtained has a function not bound but prediction has a function bound
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 175
	Obtained bound but prediction not

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<void (int)> >]
	Checking for weak equivalence with:
	[std::function<void (int)>]

	  obtained has a function bound but prediction has a function not bound
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 180
	Prediction bound but obtained not

	Comparison performed using:
	[sequoia::testing::value_tester<std::function<void (int)> >]
	Checking for weak equivalence with:
	[std::function<void (int)>]

	  obtained has a function not bound but prediction has a function bound
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 190
	string and string_view

	Comparison performed using:
	[sequoia::testing::value_tester<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	Checking for equivalence with:
	[std::basic_string_view<char, std::char_traits<char> >]

	  First difference detected at character 2:
	  [char]
	  operator== returned false
	  Obtained : o
	  Predicted: b

	  Full strings:
	  Obtained : foo
	  Predicted: fob

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 192
	Advice for equivalence checking

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	Checking for equivalence with:
	[int]

	  Wrapped value
	  [int]
	  operator== returned false
	  Obtained : 42
	  Predicted: 41
	  Advice: Integer advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 195
	Advice for range equivalence, where the containerized form is explicitly specialized

	Comparison performed using:
	[sequoia::testing::value_tester<std::vector<sequoia::testing::(anonymous namespace)::foo, std::allocator<sequoia::testing::(anonymous namespace)::foo> > >]
	Checking for equivalence with:
	[std::vector<int, std::allocator<int> >]

	  Vector equivalence

	    Element 0 of range incorrect
	    Comparison performed using:
	    [sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	    Checking for equivalence with:
	    [int]

	      Wrapped value
	      [int]
	      operator== returned false
	      Obtained : 42
	      Predicted: 41
	      Advice: Integer advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 201
	Advice for range equivalence, where the containerized form is not explicitly specialized

	[std::set<sequoia::testing::(anonymous namespace)::foo, std::less<sequoia::testing::(anonymous namespace)::foo>, std::allocator<sequoia::testing::(anonymous namespace)::foo> >]

	  Element 0 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::(anonymous namespace)::foo>]
	  Checking for equivalence with:
	  [int]

	    Wrapped value
	    [int]
	    operator== returned false
	    Obtained : 42
	    Predicted: 41
	    Advice: Integer advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 210

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	Checking for weak equivalence with:
	[std::initializer_list<int>]

	  Element 1 of range incorrect
	  [int]
	  operator== returned false
	  Obtained : 2
	  Predicted: 1

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 211

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	Checking for weak equivalence with:
	[std::initializer_list<int>]

	  Element 1 of range incorrect
	  [int]
	  operator== returned false
	  Obtained : 2
	  Predicted: 1
	  Advice: Don't mess with the beast.

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 216

	[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	  Checking for weak equivalence with:
	  [std::initializer_list<int>]

	    Element 1 of range incorrect
	    [int]
	    operator== returned false
	    Obtained : 4
	    Predicted: 5

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 219

	[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	  Checking for weak equivalence with:
	  [std::initializer_list<int>]

	    Element 1 of range incorrect
	    [int]
	    operator== returned false
	    Obtained : 4
	    Predicted: 5
	    Advice: Or at least don't mess with a vector of beasts.

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 227
	Advice for weak equivalence checking

	Comparison performed using:
	[sequoia::testing::value_tester<sequoia::testing::only_weakly_checkable>]
	Checking for weak equivalence with:
	[std::pair<int, double>]

	  Wrapped int
	  [int]
	  operator== returned false
	  Obtained : 42
	  Predicted: 41
	  Advice: Integer advice

	  Wrapped double
	  [double]
	  operator== returned false
	  Obtained : 3.14
	  Predicted: 3.13
	  Advice: Double advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 233
	Advice for range weak equivalence, where the containerized form is explicitly specialized

	[std::vector<sequoia::testing::only_weakly_checkable, std::allocator<sequoia::testing::only_weakly_checkable> >]

	  Element 0 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::only_weakly_checkable>]
	  Checking for weak equivalence with:
	  [std::pair<int, double>]

	    Wrapped int
	    [int]
	    operator== returned false
	    Obtained : 42
	    Predicted: 41
	    Advice: Integer advice

	    Wrapped double
	    [double]
	    operator== returned false
	    Obtained : 3.14
	    Predicted: 3.13
	    Advice: Double advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 238
	Advice for range weak equivalence, where the containerized form is not explicitly specialized

	[std::list<sequoia::testing::only_weakly_checkable, std::allocator<sequoia::testing::only_weakly_checkable> >]

	  Element 0 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::value_tester<sequoia::testing::only_weakly_checkable>]
	  Checking for weak equivalence with:
	  [std::pair<int, double>]

	    Wrapped int
	    [int]
	    operator== returned false
	    Obtained : 42
	    Predicted: 41
	    Advice: Integer advice

	    Wrapped double
	    [double]
	    operator== returned false
	    Obtained : 3.14
	    Predicted: 3.13
	    Advice: Double advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 249

	[std::pair<int, double>]
	operator== returned false

	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 0
	  Predicted: 1

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 255

	[std::pair<int, sequoia::testing::only_weakly_checkable>]
	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 256

	[std::pair<int, sequoia::testing::only_weakly_checkable>]
	  Second element of pair is incorrect
	  [sequoia::testing::only_weakly_checkable]
	    Wrapped double
	    [double]
	    operator== returned false
	    Obtained : 2
	    Predicted: 2.1

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 257

	[std::pair<int, sequoia::testing::only_weakly_checkable>]
	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0

	  Second element of pair is incorrect
	  [sequoia::testing::only_weakly_checkable]
	    Wrapped double
	    [double]
	    operator== returned false
	    Obtained : 2
	    Predicted: 2.1

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 258

	[std::pair<int, sequoia::testing::only_weakly_checkable>]
	  Second element of pair is incorrect
	  [sequoia::testing::only_weakly_checkable]
	    Wrapped double
	    [double]
	    operator== returned false
	    Obtained : 2
	    Predicted: 2.1
	    Advice: Double advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 264

	[std::pair<int, sequoia::testing::only_equivalence_checkable>]
	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 265

	[std::pair<int, sequoia::testing::only_equivalence_checkable>]
	  Second element of pair is incorrect
	  [sequoia::testing::only_equivalence_checkable]
	    Wrapped float
	    [double]
	    operator== returned false
	    Obtained : 1.5
	    Predicted: 1.4

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 266

	[std::pair<int, sequoia::testing::only_equivalence_checkable>]
	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 0
	  Predicted: 1

	  Second element of pair is incorrect
	  [sequoia::testing::only_equivalence_checkable]
	    Wrapped float
	    [double]
	    operator== returned false
	    Obtained : 1.5
	    Predicted: 1.4

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 267

	[std::pair<int, sequoia::testing::only_equivalence_checkable>]
	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0
	  Advice: Integer advice

	=======================================

