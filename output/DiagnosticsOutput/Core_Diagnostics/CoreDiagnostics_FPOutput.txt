	Tests/TestFramework/CoreDiagnostics.cpp, Line 89

	[bool]
	check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 90

	[bool]
	check failed
	Advice: I pity the fool who confuses the bool.

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 93
	Advisor ignored

	[bool]
	check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 97
	Integers which should compare different

	[int]
	operator== returned false
	Obtained : 5
	Predicted: 4

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 98

	[double]
	operator== returned false
	Obtained : 6.5
	Predicted: 5.6
	Advice: Double, double, toil and trouble

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 105
	Exception expected but nothing thrown

	Expected Exception Type:
	[std::runtime_error]
	No exception thrown

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 106
	Exception thrown but of wrong type

	Expected Exception Type:
	[std::runtime_error]
	Unexpected exception thrown (caught by std::exception&):
	"Error"

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 107
	Exception thrown but of unknown type

	Expected Exception Type:
	[std::runtime_error]
	Unknown exception thrown

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 112

	[std::pair<int, double>]
	operator== returned false

	  Second element of pair is incorrect
	  [double]
	  operator== returned false
	  Obtained : 7.8
	  Predicted: -7.8

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 113

	[std::pair<int, double>]
	operator== returned false

	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 5
	  Predicted: -5

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 114

	[std::pair<int, double>]
	operator== returned false

	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 5
	  Predicted: -5
	  Advice: Integer advice

	  Second element of pair is incorrect
	  [double]
	  operator== returned false
	  Obtained : 7.8
	  Predicted: 6.8
	  Advice: Double advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 116

	[std::tuple<int, double, float>]
	operator== returned false

	  Element 0 of tuple incorrect
	  [int]
	  operator== returned false
	  Obtained : 4
	  Predicted: 0

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 117

	[std::tuple<int, double, float>]
	operator== returned false

	  Element 1 of tuple incorrect
	  [double]
	  operator== returned false
	  Obtained : 3.4
	  Predicted: 0
	  Advice: Double advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 118

	[std::tuple<int, double, float>]
	operator== returned false

	  Element 2 of tuple incorrect
	  [float]
	  operator== returned false
	  Obtained : -9.2
	  Predicted: -0

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 125

	[std::variant<int, double>]
	operator== returned false

	  Variant Index
	  [unsigned long long]
	  operator== returned false
	  Obtained : 0
	  Predicted: 1

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 126

	[std::variant<int, double>]
	operator== returned false

	  Variant Contents
	  [int]
	  operator== returned false
	  Obtained : 1
	  Predicted: 2

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 127

	[std::variant<int, double>]
	operator== returned false

	  Variant Contents
	  [double]
	  operator== returned false
	  Obtained : -0.1
	  Predicted: 0

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 133

	[std::optional<int>]
	operator== returned false

	  Has value
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 134

	[std::optional<int>]
	operator== returned false

	  Has value
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 135

	[std::optional<int>]
	operator== returned false

	  Contents of optional
	  [int]
	  operator== returned false
	  Obtained : 2
	  Predicted: 0

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 140
	Empty vector check which should fail

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Container size wrong
	  [unsigned long long]
	  operator== returned false
	  Obtained : 0
	  Predicted: 1

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 141
	One element vector check which should fail due to wrong value

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Element 0 of range incorrect
	  [double]
	  operator== returned false
	  Obtained : 1
	  Predicted: 2
	  Advice: Vector element advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 143
	One element vector check which should fail due to differing sizes

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Container size wrong
	  [unsigned long long]
	  operator== returned false
	  Obtained : 1
	  Predicted: 2

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 144
	Multi-element vector comparison which should fail due to last element

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Element 1 of range incorrect
	  [double]
	  operator== returned false
	  Obtained : 5
	  Predicted: 4

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 145
	Multi-element vector comparison which should fail due to first element

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Element 0 of range incorrect
	  [double]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 146
	Multi-element vector comparison which should fail due to middle element

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Element 1 of range incorrect
	  [double]
	  operator== returned false
	  Obtained : 3.2
	  Predicted: 3.3

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 147
	Multi-element vector comparison which should fail due to different sizes

	[std::vector<double, std::allocator<double> >]
	operator== returned false

	  Container size wrong
	  [unsigned long long]
	  operator== returned false
	  Obtained : 3
	  Predicted: 2

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 151
	Iterators demarcate differing numbers of elements

	  Container size wrong
	  [unsigned long long]
	  operator== returned false
	  Obtained : 4
	  Predicted: 6

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 152
	Iterators demarcate differing elements

	  Element 0 of range incorrect
	  [float]
	  operator== returned false
	  Obtained : -4.3
	  Predicted: 1.1

	  Element 1 of range incorrect
	  [float]
	  operator== returned false
	  Obtained : 2.8
	  Predicted: -4.3

	  Element 2 of range incorrect
	  [float]
	  operator== returned false
	  Obtained : 6.2
	  Predicted: 2.8

	  Element 3 of range incorrect
	  [float]
	  operator== returned false
	  Obtained : 7.3
	  Predicted: 6.2

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 158
	Empty and non-empty strings

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  Lengths differ
	  Obtained string is too short
	  [unsigned long long]
	  operator== returned false
	  Obtained : 0
	  Predicted: 13

	  First missing character: H
	  Full strings:
	  Obtained : 
	  Predicted: Hello, World!

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 159
	Empty and non-empty strings

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  Lengths differ
	  Obtained string is too long
	  [unsigned long long]
	  operator== returned false
	  Obtained : 13
	  Predicted: 0

	  First excess character: H
	  Full strings:
	  Obtained : Hello, World!
	  Predicted: 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 160
	Strings of differing length

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 0:
	  [char]
	  operator== returned false
	  Obtained : w
	  Predicted: H

	  Full strings:
	  Obtained : what?!
	  Predicted: Hello, World!

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 161
	Differing strings of same length

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 7:
	  [char]
	  operator== returned false
	  Obtained : w
	  Predicted: W

	  Full strings:
	  Obtained : Hello, world?
	  Predicted: Hello, World!

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 165
	Empty string compared with long string

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  Lengths differ
	  Obtained string is too short
	  [unsigned long long]
	  operator== returned false
	  Obtained : 0
	  Predicted: 110

	  First missing character: T
	  Surrounding substring(s):
	  Obtained : 
	  Predicted: This is a message which is sufficiently long for only a segm...

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 166
	Long string with empty string

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  Lengths differ
	  Obtained string is too long
	  [unsigned long long]
	  operator== returned false
	  Obtained : 110
	  Predicted: 0

	  First excess character: T
	  Surrounding substring(s):
	  Obtained : This is a message which is sufficiently long for only a segm...
	  Predicted: 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 168
	Short string compared with long string

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  Lengths differ
	  Obtained string is too short
	  [unsigned long long]
	  operator== returned false
	  Obtained : 14
	  Predicted: 110

	  First missing character: a
	  Surrounding substring(s):
	  Obtained : This is a mess
	  Predicted: This is a message which is sufficiently long for only a segm...

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 169
	Long string with short string

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  Lengths differ
	  Obtained string is too long
	  [unsigned long long]
	  operator== returned false
	  Obtained : 110
	  Predicted: 14

	  First excess character: a
	  Surrounding substring(s):
	  Obtained : This is a message which is sufficiently long for only a segm...
	  Predicted: This is a mess

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 171
	Strings differing by a newline

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 5:
	  [char]
	  operator== returned false
	  Obtained : '\n'
	  Predicted: ,

	  Surrounding substring(s):
	  Obtained : ...\nWorld
	  Predicted: ..., World

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 172
	Strings differing by a newline

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 5:
	  [char]
	  operator== returned false
	  Obtained : ,
	  Predicted: '\n'

	  Surrounding substring(s):
	  Obtained : ..., World
	  Predicted: ...\nWorld

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 173
	Strings differing by a newline at the start

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 0:
	  [char]
	  operator== returned false
	  Obtained : '\n'
	  Predicted: H

	  Full strings:
	  Obtained : \nHello, World
	  Predicted: Hello, World

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 174
	Strings differing by a newline at the start

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 0:
	  [char]
	  operator== returned false
	  Obtained : H
	  Predicted: '\n'

	  Full strings:
	  Obtained : Hello, World
	  Predicted: \nHello, World

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 175
	Empty string compared with newline

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  Lengths differ
	  Obtained string is too short
	  [unsigned long long]
	  operator== returned false
	  Obtained : 0
	  Predicted: 1

	  First missing character: '\n'
	  Full strings:
	  Obtained : 
	  Predicted: \n

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 176
	Empty string compared with newline

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  Lengths differ
	  Obtained string is too long
	  [unsigned long long]
	  operator== returned false
	  Obtained : 1
	  Predicted: 0

	  First excess character: '\n'
	  Full strings:
	  Obtained : \n
	  Predicted: 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 177
	Strings differing from newline onwards

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 5:
	  [char]
	  operator== returned false
	  Obtained : ,
	  Predicted: '\n'

	  Surrounding substring(s):
	  Obtained : ..., World
	  Predicted: ...\n

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 178
	Strings differing from newline onwards

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 5:
	  [char]
	  operator== returned false
	  Obtained : '\n'
	  Predicted: ,

	  Surrounding substring(s):
	  Obtained : ...\n
	  Predicted: ..., World

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 179
	Strings differing from newline onwards

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 5:
	  [char]
	  operator== returned false
	  Obtained : ,
	  Predicted: '\n'

	  Surrounding substring(s):
	  Obtained : ..., World
	  Predicted: ...\nPeople

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 180
	Strings differing from newline onwards

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 5:
	  [char]
	  operator== returned false
	  Obtained : '\n'
	  Predicted: ,

	  Surrounding substring(s):
	  Obtained : ...\nPeople
	  Predicted: ..., World

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 181
	Output suppressed by a new line

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 5:
	  [char]
	  operator== returned false
	  Obtained : ' '
	  Predicted: ,

	  Surrounding substring(s):
	  Obtained : Hello  World...
	  Predicted: Hello, World...

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 186
	Long strings compared with difference near middle

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 75:
	  [char]
	  operator== returned false
	  Obtained : x
	  Predicted: d

	  Surrounding substring(s):
	  Obtained : ...for only a segment to be incluxed when a string diff is perf...
	  Predicted: ...for only a segment to be included when a string diff is perf...

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 187
	Long strings compared with difference near middle

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 75:
	  [char]
	  operator== returned false
	  Obtained : d
	  Predicted: x

	  Surrounding substring(s):
	  Obtained : ...for only a segment to be included when a string diff is perf...
	  Predicted: ...for only a segment to be incluxed when a string diff is perf...

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 192
	Long strings compared with difference near end

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 100:
	  [char]
	  operator== returned false
	  Obtained : x
	  Predicted: ' '

	  Surrounding substring(s):
	  Obtained : ...included when a string diff isxperformed
	  Predicted: ...included when a string diff is performed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 193
	Long strings compared with difference near end

	[std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	operator== returned false

	  First difference detected at character 100:
	  [char]
	  operator== returned false
	  Obtained : ' '
	  Predicted: x

	  Surrounding substring(s):
	  Obtained : ...included when a string diff is performed
	  Predicted: ...included when a string diff isxperformed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 207

	[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]
	operator== returned false

	  Element 0 of tuple incorrect
	  [std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >]
	  operator== returned false

	    Element 0 of range incorrect
	    [std::pair<int, float>]
	    operator== returned false

	      First element of pair is incorrect
	      [int]
	      operator== returned false
	      Obtained : 1
	      Predicted: 2
	      Advice: Nested int advice

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 212

	[std::tuple<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::set<double, std::less<double>, std::allocator<double> >, std::complex<double> >]
	operator== returned false

	  Element 1 of tuple incorrect
	  [std::set<double, std::less<double>, std::allocator<double> >]
	  operator== returned false
	  Advice: Note reordering of elements upon set construction

	    Element 2 of range incorrect
	    [double]
	    operator== returned false
	    Obtained : 3.3
	    Predicted: 3.4

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 220
	Broken check invariant

	--Regular Semantics--
	[sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >]

	  Precondition - for checking semantics, x and y are assumed to be different
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 221
	Broken equality

	--Regular Semantics--
	[sequoia::testing::broken_equality<int, std::allocator<int> >]

	  operator== is inconsistent (x)
	  [bool]
	  check failed

	  operator== is inconsistent (y)
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 222
	Broken inequality

	--Regular Semantics--
	[sequoia::testing::broken_inequality<int, std::allocator<int> >]

	  operator!= is inconsistent (x)
	  [bool]
	  check failed

	  operator!= is inconsistent (y)
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 223
	Broken copy

	--Regular Semantics--
	[sequoia::testing::broken_copy<int, std::allocator<int> >]

	  Inconsistent copy constructor (x)
	  [sequoia::testing::broken_copy<int, std::allocator<int> >]
	  operator== returned false
	  Obtained : 
	  Predicted: 1 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 224
	Broken move

	--Regular Semantics--
	[sequoia::testing::broken_move<int, std::allocator<int> >]

	  Inconsistent move construction
	  [sequoia::testing::broken_move<int, std::allocator<int> >]
	  operator== returned false
	  Obtained : 
	  Predicted: 2 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 225
	Broken copy assignment

	--Regular Semantics--
	[sequoia::testing::broken_copy_assignment<int, std::allocator<int> >]

	  Inconsistent copy assignment (from y)
	  [sequoia::testing::broken_copy_assignment<int, std::allocator<int> >]
	  operator== returned false
	  Obtained : 1 
	  Predicted: 2 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 226
	Broken move assignment

	--Regular Semantics--
	[sequoia::testing::broken_move_assignment<int, std::allocator<int> >]

	  Inconsistent move assignment (from y)
	  [sequoia::testing::broken_move_assignment<int, std::allocator<int> >]
	  operator== returned false
	  Obtained : 1 
	  Predicted: 2 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 227
	Broken self copy assignment

	--Regular Semantics--
	[sequoia::testing::broken_self_copy_assignment<int, std::allocator<int> >]

	  Inconsistent self copy assignment
	  [sequoia::testing::broken_self_copy_assignment<int, std::allocator<int> >]
	  operator== returned false
	  Obtained : 2 0 
	  Predicted: 2 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 228
	Broken swap

	--Regular Semantics--
	[sequoia::testing::broken_swap<int, std::allocator<int> >]

	  Inconsistent Swap (y)
	  [sequoia::testing::broken_swap<int, std::allocator<int> >]
	  operator== returned false
	  Obtained : 2 
	  Predicted: 1 

	  Inconsistent Swap (x)
	  [sequoia::testing::broken_swap<int, std::allocator<int> >]
	  operator== returned false
	  Obtained : 1 
	  Predicted: 2 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 229
	Broken self swap

	--Regular Semantics--
	[sequoia::testing::broken_self_swap<int, std::allocator<int> >]

	  Inconsistent Self Swap
	  [sequoia::testing::broken_self_swap<int, std::allocator<int> >]
	  operator== returned false
	  Obtained : 1 0 
	  Predicted: 1 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 230
	Broken copy value semantics

	--Regular Semantics--
	[sequoia::testing::broken_copy_value_semantics<int, std::shared_ptr<int>, std::allocator<std::shared_ptr<int> > >]

	  Either mutation is not doing anything following copy construction or value semantics are broken, with mutation of an object also changing the object from which it was copied
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 231
	Broken copy assignment value semantics

	--Regular Semantics--
	[sequoia::testing::broken_copy_assignment_value_semantics<int, std::shared_ptr<int>, std::allocator<std::shared_ptr<int> > >]

	  Either mutation is not doing anything following copy assignment or value semantics are broken, with mutation of an object also changing the object from which it was assigned
	  [bool]
	  check failed

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 233
	Broken serialization

	--Regular Semantics--
	[sequoia::testing::broken_serialization<int, std::allocator<int> >]

	  Inconsistent (de)serialization
	  [sequoia::testing::broken_serialization<int, std::allocator<int> >]
	  operator== returned false
	  Obtained : 
	  Predicted: 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 234
	Broken deserialization

	--Regular Semantics--
	[sequoia::testing::broken_deserialization<int, std::allocator<int> >]

	  Inconsistent (de)serialization
	  [sequoia::testing::broken_deserialization<int, std::allocator<int> >]
	  operator== returned false
	  Obtained : 1 
	  Predicted: 2 

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 239

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	With equivalent types:
	[char [3]]

	  Lengths differ
	  Obtained string is too long
	  [unsigned long long]
	  operator== returned false
	  Obtained : 3
	  Predicted: 2

	  First excess character: o
	  Full strings:
	  Obtained : foo
	  Predicted: fo

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 240

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	With equivalent types:
	[char [4]]

	  First difference detected at character 2:
	  [char]
	  operator== returned false
	  Obtained : o
	  Predicted: b

	  Full strings:
	  Obtained : foo
	  Predicted: fob
	  Advice: Sort your chars out!

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 244

	[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::equivalence_checker<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	  With equivalent types:
	  [std::basic_string_view<char, std::char_traits<char> >]

	    First difference detected at character 0:
	    [char]
	    operator== returned false
	    Obtained : b
	    Predicted: c

	    Full strings:
	    Obtained : b
	    Predicted: c

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 246

	[std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::equivalence_checker<std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]
	  With equivalent types:
	  [std::basic_string_view<char, std::char_traits<char> >]

	    First difference detected at character 0:
	    [char]
	    operator== returned false
	    Obtained : b
	    Predicted: c

	    Full strings:
	    Obtained : b
	    Predicted: c
	    Advice: Ah, chars. So easy to get wrong.

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 252

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::pair<int const&, double> >]
	With equivalent types:
	[std::pair<int, double const&>]

	  First element of pair is incorrect
	  [int]
	  operator== returned false
	  Obtained : 5
	  Predicted: -5

	  Second element of pair is incorrect
	  [double]
	  operator== returned false
	  Obtained : 7.8
	  Predicted: 6.8

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 253

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::tuple<int const&, double> >]
	With equivalent types:
	[std::tuple<int, double const&>]

	  Element 0 of tuple incorrect
	  [int]
	  operator== returned false
	  Obtained : 5
	  Predicted: -5

	  Element 1 of tuple incorrect
	  [double]
	  operator== returned false
	  Obtained : 7.8
	  Predicted: 6.8

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 255
	Inequivalence of two different paths, neither of which exists

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	  Final path token
	  [std::filesystem::path]
	  operator== returned false
	  Obtained : Blah
	  Predicted: Blurg

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 259
	Inequivalence of two different paths, one of which exists

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	  Path type
	  output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/Blah
	  vs
	  output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/A

	  [std::filesystem::file_type]
	  operator== returned false
	  Obtained : not found
	  Predicted: directory

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 263
	Inequivalence of directory/file

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	  Path type
	  output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/A
	  vs
	  output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/A/foo.txt

	  [std::filesystem::file_type]
	  operator== returned false
	  Obtained : directory
	  Predicted: regular

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 267
	Inequivalence of differently named files

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	  Path type
	  output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/B/foo.txt
	  vs
	  output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/B/bar.txt

	  [std::filesystem::file_type]
	  operator== returned false
	  Obtained : regular
	  Predicted: not found

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 271
	Inequivalence of file contents

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	  Contents of
	  output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/A/foo.txt
	  vs
	  output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/B/foo.txt

	  [std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	  operator== returned false

	    First difference detected at character 5:
	    [char]
	    operator== returned false
	    Obtained : ,
	    Predicted: '\n'

	    Surrounding substring(s):
	    Obtained : ..., world...
	    Predicted: ...\n

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 275
	Inequivalence of differently named directories with the same contents

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	  Final path token
	  [std::filesystem::path]
	  operator== returned false
	  Obtained : A
	  Predicted: C

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 279
	Inequivalence of directories with the same files but different contents

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	  Contents of
	  output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/A/foo.txt
	  vs
	  output/TestsTemporaryData/TestFramework/CoreDiagnostics/MoreStuff/A/foo.txt

	  [std::basic_string<char, std::char_traits<char>, std::allocator<char> >]
	  operator== returned false

	    First difference detected at character 5:
	    [char]
	    operator== returned false
	    Obtained : ,
	    Predicted: '\n'

	    Surrounding substring(s):
	    Obtained : ..., world...
	    Predicted: ...\n

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 283
	Inequivalence of directories with some common files

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	  Number of directory entries for output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/B
	  [unsigned long long]
	  operator== returned false
	  Obtained : 1
	  Predicted: 2

	  First directory entry mismatch
	  [std::filesystem::path]
	  operator== returned false
	  Obtained : output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/B/foo.txt
	  Predicted: output/TestsTemporaryData/TestFramework/CoreDiagnostics/MoreStuff/B/bar.txt

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 287
	Inequivalence of directories with some common files

	Comparison performed using:
	[sequoia::testing::equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	  Number of directory entries for output/TestsTemporaryData/TestFramework/CoreDiagnostics/MoreStuff/B
	  [unsigned long long]
	  operator== returned false
	  Obtained : 2
	  Predicted: 1

	  First directory entry mismatch
	  [std::filesystem::path]
	  operator== returned false
	  Obtained : output/TestsTemporaryData/TestFramework/CoreDiagnostics/MoreStuff/B/bar.txt
	  Predicted: output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/B/foo.txt

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 291
	Weak inequivalence of directories with some common files

	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<std::filesystem::path>]
	With equivalent types:
	[std::filesystem::path]

	  Number of directory entries for output/TestsTemporaryData/TestFramework/CoreDiagnostics/MoreStuff/B
	  [unsigned long long]
	  operator== returned false
	  Obtained : 2
	  Predicted: 1

	  First directory entry mismatch
	  [std::filesystem::path]
	  operator== returned false
	  Obtained : output/TestsTemporaryData/TestFramework/CoreDiagnostics/MoreStuff/B/bar.txt
	  Predicted: output/TestsTemporaryData/TestFramework/CoreDiagnostics/Stuff/B/foo.txt

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 299

	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]

	  Element 1 of range incorrect
	  [int]
	  operator== returned false
	  Obtained : 2
	  Predicted: 1

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 300

	Comparison performed using:
	[sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	With equivalent types:
	[std::initializer_list<int>]

	  Element 1 of range incorrect
	  [int]
	  operator== returned false
	  Obtained : 2
	  Predicted: 1
	  Advice: Don't mess with the beast.

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 305

	[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	  With equivalent types:
	  [std::initializer_list<int>]

	    Element 1 of range incorrect
	    [int]
	    operator== returned false
	    Obtained : 4
	    Predicted: 5

	=======================================

	Tests/TestFramework/CoreDiagnostics.cpp, Line 306

	[std::vector<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> >, std::allocator<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > > >]

	  Element 1 of range incorrect
	  Comparison performed using:
	  [sequoia::testing::weak_equivalence_checker<sequoia::testing::perfectly_normal_beast<int, std::allocator<int> > >]
	  With equivalent types:
	  [std::initializer_list<int>]

	    Element 1 of range incorrect
	    [int]
	    operator== returned false
	    Obtained : 4
	    Predicted: 5
	    Advice: Or at least don't mess with a vector of beasts.

	=======================================

